sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = ["src/"]
sourceSets.main.resources.srcDirs = ["../assets"]

project.ext.mainClassName = "com.fourinachamber.fourtyfive.DesktopLauncher"
project.ext.assetsDir = new File("../assets")

import org.gradle.internal.os.OperatingSystem

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true

    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        // Required to run on macOS
        jvmArgs += "-XstartOnFirstThread"
    }
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}
//
//task createSendableZip(type: Zip) {
//    from 'launch4j/'
//    include '*'
//    include '*/*' //to include contents of a folder present inside Reports directory
//    archiveName 'fourty-five.zip'
//    destinationDir(file(layout.buildDirectory.dir("launch4j")))
//}

task doExeTest() {
    launch4j {
        mainClassName = 'com.fourinachamber.fourtyfive.DesktopLauncher'
        icon = "${projectDir}/icons/myApp.ico"
        headerType = "gui"
    }
    dependsOn(tasks.launch4j)
    dependsOn(tasks.build)
    tasks.register('copyFilesToExe', Copy) {
        from layout.buildDirectory.dir("resources/main")
        into layout.buildDirectory.dir("launch4j")
    }
    dependsOn(tasks.copyFilesToExe)
//    dependsOn(tasks.createSendableZip)
//    project.logger.lifecycle('my debug message:'+layout.buildDirectory)
}

dist.dependsOn classes

eclipse.project.name = appName + "-desktop"
