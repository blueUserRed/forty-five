import "imports/colors.onj" as color;
import "screens/input_maps.onj" as inputMaps;
import "config/graphics_config.onj" as graphicsConfig;
import "screens/shared_components.onj" as sharedComponents;

use Common;
use Screen;
use Style;


var worldWidth = 1600.0;
var worldHeight = 900.0;

assets: {
    useAssets: [
        "roadgeek", "red_wing_bmp",
        "title_screen_background", "key_select_frame", "white_texture", "enemy_texture", "red_wing",
        "normal_bullet", "grey_texture", "heart_texture", "burning_icon", "white_rounded", "reserves_texture",
        "black_texture", "world_view_background", "map_background_snow_tileable", "map_detail_background",
        "map_detail_fight_button_hover", "map_detail_fight_button", "map_background_grass_tileable",
        "map_background_wasteland_tileable","map_background_bewitched_forest_tileable",
        "location_sign_salem", "transparent_black_texture",
        "map_decoration_wasteland_cactus_1", "map_decoration_wasteland_cactus_2", "map_decoration_grass", "map_path", "dialog_continue_arrow",
        "map_player", "location_sign_aqua_dulche", "location_sign_salem",
        "map_node_default",
        "map_node_shop",
        "map_node_fight",
        "map_node_exit",
        "map_node_heal",
        "map_node_choose_card",
        "map_node_dialog",
        "card_character",
        "map_decoration_wasteland_snake_2", // there is no snake 1, because of Nils and/or Fillipo
        "map_decoration_wasteland_dune_1", "map_decoration_wasteland_dune_2",
        "map_decoration_wasteland_dune_3", "map_decoration_wasteland_dune_4",
        "map_decoration_wasteland_skull_1", "map_decoration_wasteland_skull_2",
        "common_button_default", "common_button_hover", "common_button_disabled",
        "map_decoration_bewitched_forest_sheep_1","map_decoration_bewitched_forest_sheep_2",
        "map_decoration_bewitched_forest_tree1",

        "card_symbol_saved", "card_symbol_not_saved",

        "map_detail_encounter_modifier_background",

        "tutorial_info_actor_background",
        "backpack_scrollbar_background", "backpack_scrollbar",

        "map_edge_shader", "bewitched_fog_static_noise_shader", "bewitched_fog_dynamic_noise_shader",
        "prerendered_noise_perlin_512x512", "grayscale_shader", "alpha_reduction_shader",

        "card_hover_sound", "card_pickup_sound", "card_laydown_sound", "not_allowed_sound", "button_2_sound", "walk_sound",

        "map_extraction_background", "map_extraction_symbol",
        "map_extraction_card_background_blue", "map_extraction_card_background_white",

        "map_theme",

        ...(sharedComponents.ambientSoundsUsedAssets),
        ...(graphicsConfig.encounterModifierAssets),
        ...(sharedComponents.backpackAssets),
        ...(sharedComponents.navBarUsedAssets),
        ...(sharedComponents.warningLabelUsedAssets),
        ...(sharedComponents.tutorialInfoActorUsedAssets),
    ]
},

viewport: $FitViewport {
    worldWidth: worldWidth,
    worldHeight: worldHeight
},

options: {
    transitionAwayTime: 1.0,
    background: "black_texture",
    music: "map_theme",
    playAmbientSounds: true,
    screenController: $MapScreenController {
        tutorialInfoActor: "tutorialInfoActor",
        mapWidgetName: "map"
    },
    inputMap: [
        ...(inputMaps.defaultInputMap),
        ...(inputMaps.detailMapInputMap),
    ]
},

//var worldView = $WorldView {
//    styles: [
//        {
//            style_priority: 1,
//            width: 100.0#percent,
//            height: 100.0#percent,
//        },
//    ],
//    behaviours: [
//        $OnClickChangeScreenStateBehaviour {
//            state: "show_world_view",
//            enter: false
//        }
//    ]
//};

var encounterModifierDisplayTemplate = $Box {
    template_name: "encounter_modifier_display",
    template_keys: {
        "children.0.styles.0.background": "symbol",
        "children.1.children.0.text": "modifierName",
        "children.1.children.1.text": "modifierDescription",
    },
    styles: [
        {
            flexDirection: flexDirection.row,
//            width: 90#percent,
            width: 230#points,
            marginLeft: 20#points
        }
    ],
} children [
    $Box {
        styles: [
            {
                background: "encounter_modifier_frost",
                aspectRatio: 1.0,
                marginTop: 20#points,
                width: 30#points,
            }
        ],
    },

    $Box {
        styles: [
            {
                flexDirection: flexDirection.column,
                alignItems: align.flexStart,
                marginLeft: 10#points,
            }
        ]
    } children [
        $Label {
            font: "red_wing",
            text: "Frost",
            fontScale: 0.6,
            align: "left",
            color: color.red
        },
        $Label {
            styles: [
                {
                    width: 230#points
                }
            ],
            font: "roadgeek",
            text: "Some long description text Lorem Ipsum Lorem Ipsum Lorem Ipsum",
            wrap: true,
            fontScale: 0.5,
            align: "left",
            color: color.black,
        }
    ]

];

var infoPopup = $Box {
    styles: [
        {
            style_priority: 1,
            alignItems: align.center,
            justifyContent: justify.spaceBetween,
            height: 90.0#percent,
            width: 30.0#percent,
            positionLeft: 100.0#percent,
            paddingTop: 60#points,
            paddingBottom: 60#points,
            paddingLeft: 130.0#points,
            background: "map_detail_background"
        },
        {
            style_priority: 2,
            style_animation: {
                duration: 0.2,
                interpolation: interpolation.linear
            },
            positionLeft: (25.0 * 10)#points,
        },
        {
            style_priority: 3,
            style_condition: state("displayEventDetail") and not(state("transition away")),
            style_animation: {
                duration: 0.2,
                interpolation: interpolation.linear
            },
            positionLeft: (0.0 * 10)#points,
        },
    ],
} children [

    $Box {
        styles: [
            {
                width: 100#percent,
                alignItems: align.center,
            }
        ]
    } children [

        $TemplateLabel {
            styles: [
                {
                    width: 95#percent
                }
            ],
            font: "red_wing",
            template: "{map.cur_event.displayName}",
            fontScale: 1.1,
            wrap: true,
            align: "center",
            color: color.white,
        },

        $TemplateLabel {
            font: "roadgeek",
            template: "{map.cur_event.description}",
            fontScale: 0.7,
            color: color.white,
            wrap: true,
            align: "center",
            styles: [
                {
                    width: 90#percent,
                }
            ]
        },

        $Box {
            name: "encounter_modifier_parent",
            styles: [
                {
                    style_priority: 1,
                    background: "map_detail_encounter_modifier_background",
                    width: 90#percent,
                    height: 300#points,
                    flexDirection: flexDirection.column,
                    justifyContent: justify.center,
                    detached: false,
                },
                {
                    style_priority: 2,
                    style_condition: state("noEncounterModifier"),
                    detached: true,
                }
            ],
        } children [

        ],
    ],

    $Box {
        styles: [
            {
                style_priority: 1,
                disabled: false,
                alignItems: align.center,
                justifyContent: justify.center,
                height: 50#points,
                width: 140#points,
                background: "common_button_default"
            },
            {
                style_priority: 2,
                style_condition: hover() and state("canStartEvent"),
                background: "common_button_hover"
            },
            {
                style_priority: 3,
                style_condition: not(state("canStartEvent")),
                disabled: true,
                background: "common_button_disabled"
            }
        ],
        behaviours: [
            sharedComponents.buttonSoundBehaviour,
            sharedComponents.buttonCursorBehaviour,
        ]
    } children [

        $TemplateLabel {
            styles: [
                {
                    width: 140#points,
                }
            ],
            font: "red_wing",
            name: "start_button",
            template: "{map.cur_event.buttonText}",
            fontScale: 1.0,
            color: color.white,
            align: "center",
        }

    ]

];

var mapBox = $Box {
    styles: [
        {
            height: 100.0#percent,
            flexDirection: flexDirection.row,
            alignItems: align.center,
            justifyContent: justify.flexEnd
        }
    ],
    zIndex: 0
} children [

    $Map {
        styles: [
            {
                style_priority: 1,
                width: 100.0#percent,
                height: 100.0#percent,
                positionType: positionType.absolute,
                positionRight: 0#points,
                positionTop: 0#points,
                positionBottom: 0#points,
                backgroundScale: 0.8,
                background: "map_background_wasteland_tileable",
            },
            {
                style_priority: 2,
                style_condition: biome("snow"),
                backgroundScale: 2.5,
                background: "map_background_snow_tileable",
                // i hope its okay to abuse this, if not, then please say
            },
            {
                style_priority: 2,
                style_condition: biome("dunkelwald"),
                backgroundScale: 0.5,
                background: "map_background_grass_tileable",
            },
            {
                style_priority: 2,
                style_condition: biome("bewitched_forest"),
                backgroundScale: 0.5,
                background: "map_background_bewitched_forest_tileable",
            }
        ],
        detailMapProvider: $CurrentMapProvider {
        },
        nodeSize: 60.0,
        lineWidth: 10.0,
        mapScale: 10.0,
        name: "map",
        defaultNodeTexture: "map_node_default",
        playerTexture: "map_player",
        playerWidth: 170.0,
        playerHeight: 170.0,
        playerHeightOffset: 50.0,
        edgeTexture: "map_path",
        playerMovementTime: 0.3,
        scrollMargin: 0.0,
        directionIndicator: "dialog_continue_arrow",
        encounterModifierDisplayTemplateName: "encounter_modifier_display",
        encounterModifierParentName: "encounter_modifier_parent",
        screenSpeed: 25.0,
        disabledDirectionIndicatorAlpha: 0.5,
        startButtonName: "start_button"
    },

    infoPopup,

];

var extractionOverlay = $Box {
    styles: [
        {
            style_priority: 1,
            width: worldWidth#points,
            height: worldHeight#points,
            alignItems: align.center,
            justifyContent: justify.center,
            background: "transparent_black_texture",
            detached: true,
        },
        {
            style_priority: 2,
            style_condition: state("show_extraction_popup"),
            detached: false
        }
    ],
    touchable: "enabled",
    zIndex: 3,
} children [

    $Box {
        styles: [
            {
                width: (worldWidth * 0.5)#points,
                height: (worldHeight * 0.65)#points,
                background: "map_extraction_background",
                flexDirection: flexDirection.column,
                alignItems: align.center
            }
        ],
    } children [

        $Box {
            styles: [
                {
                    background: "map_extraction_symbol",
                    positionType: positionType.absolute,
                    positionTop: -80#points,
                    width: 150#points,
                    aspectRatio: 1.0
                }
            ]
        },

        $Label {
            styles: [
                {
                    positionTop: 50#points,
                }
            ],
            font: "red_wing",
            text: "Bullets have been saved!",
            fontScale: 1.3,
            color: color.white,
        },

        $Box {
            styles: [
                {
                    background: "map_extraction_card_background_blue",
                    width: (worldWidth * 0.5)#points,
                    height: (worldHeight * 0.6)#points,
                    alignItems: align.center,
                    justifyContent: justify.center,
                }
            ]
        } children [
            $ScrollBox {
                name: "extraction_cards_parent",
                styles: [
                    {
                        background: "map_extraction_card_background_white",
                        width: (worldWidth * 0.5 - 120)#points,
                        height: (worldHeight * 0.6 - 120)#points,
                        flexWrap: wrap.wrap,
                        flexDirection: flexDirection.row,
                        justifyContent: justify.flexStart,
                        paddingLeft: (3.0 * 15)#points,
                        paddingRight: (35.0)#points,
                        paddingTop: (3.0 * 10)#points,
                        paddingBottom: (4.0 * 10)#points,
                        cuttingLeft: 17.5,
                        cuttingRight: 17.5,
                        cuttingTop: 20.0,
                        cuttingBottom: 20.0,
                        scrollbarWidth: 15.0,
                        scrollbarLength: 90.0#percent,
                    }
                ],
                isScrollDirectionVertical: false,
                scrollDistance: 10.0,
                backgroundStretched: false,
                scrollbarBackgroundName: "scrollbar_background",
                scrollbarName: "scrollbar_handle",
                scrollbarSide: "right",
            } children [

                  $Image {
                    name: "scrollbar_background",
                    textureName: "backpack_scrollbar_background",
                    scaleX: 1.0,
                    scaleY: 1.0,
                    reportDimensionsWithScaling: true,
                },

                $Image {
                    name: "scrollbar_handle",
                    textureName: "backpack_scrollbar",
                    scaleX: 1.0,
                    scaleY: 1.0,
                },

            ]
        ],

        $Box {
            styles: [
                {
                    style_priority: 1,
                    //positionTop: 100#points,
                    background: "common_button_default",
                    positionType: positionType.relative,
                    //positionType: positionType.absolute,
                    //positionTop: 20#points,
                    //positionTop: 620#points,
                    width: 150#points,
                    height: 60#points,
                    alignItems: align.center,
                    justifyContent: justify.center
                },
                {
                    style_priority: 2,
                    style_condition: hover(),
                    background: "common_button_hover",
                },
            ]
        } children [
            $Label {
                font: "roadgeek",
                text: "Continue",
                fontScale: 1.0,
                color: color.white,
                behaviours: [
                    sharedComponents.buttonSoundBehaviour,
                    sharedComponents.buttonCursorBehaviour,
                    $CatchEventAndEmitBehaviour {
                        catch: "ButtonClickEvent",
                        emit: "PopupConfirmationEvent"
                    }
                ]
            }
        ]

    ],

];

root: $Box {
    styles: [
        {
            style_priority: 1,
            positionType: positionType.absolute,
            width: worldWidth#points,
            height: worldHeight#points,
            //            width: 100.0#percent,
//            height: 100.0#percent,

            flexDirection: flexDirection.column,
            justifyContent: justify.center
        }
    ],
} children [

    sharedComponents.tutorialInfoActor,

    $Box {
        styles: [
            {
                style_priority: 1,
                positionType: positionType.absolute,
                detached: true,
                width: 100.0#percent,
                height: 100.0#percent,
            },
            {
                style_priority: 2,
                detached: false,
                style_condition: state("show_world_view")
            }
        ],
        zIndex: 2,
    } children [
//        worldView,
    ],
    extractionOverlay,
/*
    $Box {
        styles: [
            {
                style_priority: 1,
                positionType: positionType.absolute,
                background: "transparent_black_texture",
                alignItems: align.center,
                justifyContent: justify.center,
                detached: true,
                width: 100.0#percent,
                height: 100.0#percent,
            },
            {
                style_priority: 2,
                detached: false,
                style_condition: state("show_extraction_popup")
            }
        ],
        touchable: "enabled",
        zIndex: 3,
    } children [

        $Label {
            font: "red_wing",
            text: "Cards extracted!",
            fontScale: 0.9,
            color: color.white,
        },

        $Label {
            font: "red_wing",
            text: "Ok",
            fontScale: 0.9,
            color: color.white,
            behaviours: [
                $CatchEventAndEmitBehaviour {
                    catch: "ButtonClickEvent",
                    emit: "PopupConfirmationEvent"
                }
            ]
        },
    ],
*/
    $Box {
        styles: [
            {
                style_priority: 1,
                positionType: positionType.absolute,
                width: worldWidth#points,
                height: worldHeight#points,
                detached: false
            },
            {
                style_priority: 2,
                style_condition: state("show_world_view")
            }
        ],
        zIndex: 1,
    } children [
        mapBox,
        $Statusbar {
            options: [
                {
                    actorName: "backpackActor",
                    displayName: "Backpack",
                },
                {
                    actionName: "toTitleScreen",
                    displayName: "To Title Screen",
                },
            ],
            //            ...(sharedComponents.statusbarLeftDefaults) //Hint to use on left side: use this command instead of next, and comment 2/3 actors in the options out

            ...(sharedComponents.statusbarCenterDefaults)
        },
        sharedComponents.backpack,
    ],
    sharedComponents.warningParent,
],

templates: [
    ...(sharedComponents.statusBarTemplates),
    ...(sharedComponents.backpackTemplates),
    ...(sharedComponents.warningLabelTemplates),
    encounterModifierDisplayTemplate,

    $None {
        template_name: "cardTemplate",
        template_keys: {
        },
        styles: [
            {
                width: 20.0#percent,
                height: 35.0#percent,
                marginLeft: 10#points,
                marginTop: 10#points,
            },
        ]
    }

],