
import "config/game_config.onj" as gameConfig;
import "config/graphics_config.onj" as graphicsConfig;
import "imports/colors.onj" as color;
import "screens/input_maps.onj" as inputMaps;
import "screens/shared_components.onj" as sharedComponents;

use Common;
use Screen;
use Style;

var pi = 3.141;

var worldWidth = 1600.0;
var worldHeight = 900.0;

var cardScale = 0.22;
var cardHeight = 596.0 * cardScale;

var cardZIndicesStart = 100;
var cardZIndicesEnd = cardZIndicesStart + 100;
var overlayZIndex = 500;

assets: {
    useAssets: [

        "vanilla_whale", "red_wing",

        "game_screen_background_wasteland", "revolver_slot_texture", "enemy_texture", "wood_box", "deck_icon",
        "end_turn_button_texture", "end_turn_button_hover_texture",
        "shoot_button_texture", "shoot_button_hover_texture",
        "pass_button_texture", "pass_button_hover_texture",
        "parry_button_texture", "parry_button_hover_texture",
        "revolver_drum",
        "heart_texture", "reserves_texture", "hit_overlay", "draw_bullet", "draw_cover", "grey_texture",
        "player_bar", "warning_label_background_red", "under_deck_background", "encounter_modifier_background",
        "game_screen_player", "player_turn_banner", "enemy_turn_banner",

        "enemy_action_damage", "enemy_action_cover",

        "enemy_pyro", "enemy_action_burning", "enemy_action_inferno",
        "enemy_action_hot_potato", "enemy_action_unknown",
        "enemy_pyro_action_comic_common_panel_1", "enemy_pyro_action_comic_common_panel_2",
        "enemy_pyro_action_comic_common_panel_3", "enemy_pyro_action_comic_panel_burning",
        "enemy_pyro_action_comic_panel_fire_resistance", "enemy_pyro_action_comic_panel_hot_potato",
        "enemy_pyro_action_comic_panel_inferno",

        "enemy_witch", "enemy_action_bewitched", "enemy_action_left_turn",
        "enemy_witch_action_comic_common_panel_1", "enemy_witch_action_comic_common_panel_2",
        "enemy_witch_action_comic_common_panel_3", "enemy_witch_action_comic_panel_left_turn",
        "enemy_witch_action_comic_panel_bewitched", "enemy_witch_action_comic_panel_wrath_of_the_witch",
        "enemy_witch_action_comic_panel_ward_of_the_witch",

        "tutorial_actor_shader",

        "enemy_outlaw",

        "revolver_cursor",

        "dissolve_shader", "prerendered_noise_perlin_512x512", "ice_shader", "ice_texture", "parry_shader",

        ...(graphicsConfig.keySelectUsedAssets),
        ...(graphicsConfig.gameUsedAssets),
        ...(graphicsConfig.encounterModifierAssets),
        ...(sharedComponents.navBarUsedAssets),
        ...(sharedComponents.warningLabelUsedAssets),
        ...(sharedComponents.cardHoverDetailUsedAssets),
        ...(sharedComponents.tutorialInfoActorUsedAssets),
    ]
},

viewport: $FitViewport {
    worldWidth: worldWidth,
    worldHeight: worldHeight
},

var controller = $GameScreenController {
    cardsFile: "config/cards.onj",
    cardHand: {
        actorName: "card_hand"
    },
    revolver: {
        actorName: "revolver",
        dropBehaviour: $RevolverDropTarget {
            group: "card"
        }
    },
    putCardsUnderDeckWidget: {
        actorName: "putCardsUnderDeckWidget",
        dropBehaviour: $PutCardsUnderDeckDropTarget {
            group: "card"
        }
    },
    enemyArea: {
        actorName: "enemy_area",
    },
    cardSelector: {
        actorName: "card_selector"
    },
    cardDragBehaviour: $CardDragSource {
        group: "card"
    },
    cardDropBehaviour: $CardDropTarget {
        group: "card"
    },
    warningParentName: "WARNING_PARENT",
    statusEffectDisplayName: "status_effect_display",
    cardsToDrawInFirstRound: gameConfig.cardDrawConfig.firstRound,
    cardsToDraw: gameConfig.cardDrawConfig.roundStart,
    softMaxCards: gameConfig.cardDrawConfig.softMaxCards,
    hardMaxCards: gameConfig.cardDrawConfig.hardMaxCards,
    reservesAtRoundBegin: gameConfig.reservesConfig.roundStart,
    shotEmptyDamage: gameConfig.damageConfig.shotEmptyDamage,
    rewardChance: gameConfig.cardDrawConfig.chooseCardRewardPercantage,
    encounterModifierDisplayTemplateName: "encounter_modifier_display",
    encounterModifierParentName: "encounter_modifier_parent",
    tutorialInfoActorName: "tutorialInfoActor"
};

options: {
    background: "game_screen_background_wasteland",
    screenController: controller,
    inputMap: [
        ...(inputMaps.gameInputMap),
        ...(inputMaps.defaultInputMap)
    ]
},

var encounterModifierDisplayTemplate = $Box {
    template_name: "encounter_modifier_display",
    template_keys: {
        "children.0.styles.0.background": "symbol",
        "children.1.children.0.text": "modifierName",
        "children.1.children.1.text": "modifierDescription",
    },
    styles: [
        {
            flexDirection: flexDirection.row,
            width: 400#points,
            marginLeft: 20#points
        }
    ],
} children [
    $Box {
        styles: [
            {
                background: "encounter_modifier_frost",
                aspectRatio: 1.0,
                marginTop: 20#points,
                width: 40#points,
            }
        ],
    },

    $Box {
        styles: [
            {
                flexDirection: flexDirection.column,
                alignItems: align.flexStart,
                marginLeft: 20#points,
            }
        ]
    } children [
        $Label {
            font: "red_wing",
            text: "Frost",
            fontScale: 0.6,
            align: "left",
            color: color.red
        },
        $Label {
            styles: [
                {
                    width: 370#points
                }
            ],
            font: "red_wing",
            text: "Some long description text Lorem Ipsum Lorem Ipsum Lorem Ipsum",
            wrap: true,
            fontScale: 0.6,
            align: "left",
            color: color.black,
        }
    ]

];

var enemyActionAnimationTemplate = $Box {
    template_name: "enemy_action_animation",
    template_keys: {
        "children.0.children.0.textureName": "commonPanel3",
        "children.0.children.1.textureName": "commonPanel2",
        "children.0.children.2.textureName": "commonPanel1",
        "children.1.textureName": "actionPanel",
        "children.2.children.0.children.0.text": "actionName",
        "children.2.children.0.children.2.text": "actionDescription",
        "children.2.children.1.styles.0.background": "actionIcon",
    },
    styles: [
        {
            positionType: positionType.absolute,
            width: 800#points,
            height: 500#points,
            positionTop: (worldHeight / 2.0 - 500.0 / 2.0 - 100)#points,
            positionLeft: (worldWidth - 800)#points,
            flexDirection: flexDirection.column,
            alignItems: align.flexEnd
        }
    ],
} children [

    $Box {
        styles: [
            {
                flexDirection: flexDirection.row,
                alignItems: align.flexEnd,
                height: 200#points,
                marginBottom: -20#points
            }
        ],
    } children [

        $Image {
            styles: [
                {
                    style_priority: 1,
                    offsetX: 400.0,
                    width: 50#points
                },
                {
                    style_priority: 2,
                    style_condition: state("enemy_action_anim"),
                    offsetX: 0.0,
                    style_animation: {
                        duration: 0.2,
                        interpolation: interpolation.elastic_out
                    }
                }
            ],
            textureName: "enemy_pyro_action_comic_common_panel_3",
            reportDimensionsWithScaling: true,
            scaleX: 0.8,
            scaleY: 0.8,
        },
        $Image {
            styles: [
                {
                    style_priority: 1,
                    offsetX: 400.0
                },
                {
                    style_priority: 2,
                    style_condition: state("enemy_action_anim"),
                    offsetX: 0.0,
                    style_animation: {
                        duration: 0.2,
                        delay: 0.2,
                        interpolation: interpolation.elastic_out
                    }
                }
            ],
            textureName: "enemy_pyro_action_comic_common_panel_2",
            reportDimensionsWithScaling: true,
            scaleX: 0.8,
            scaleY: 0.8,
        },
        $Image {
            styles: [
                {
                    style_priority: 1,
                    offsetX: 400.0
                },
                {
                    style_priority: 2,
                    style_condition: state("enemy_action_anim"),
                    offsetX: 0.0,
                    style_animation: {
                        duration: 0.2,
                        delay: 0.4,
                        interpolation: interpolation.elastic_out
                    }
                }
            ],
            textureName: "enemy_pyro_action_comic_common_panel_1",
            reportDimensionsWithScaling: true,
            scaleX: 0.8,
            scaleY: 0.8,
        },

    ],

    $Image {
        styles: [
            {
                style_priority: 1,
                offsetX: 700.0
            },
            {
                style_priority: 2,
                style_condition: state("enemy_action_anim"),
                offsetX: 0.0,
                style_animation: {
                    duration: 0.2,
                    delay: 0.6,
                    interpolation: interpolation.elastic_out
                }
            }
        ],
        textureName: "enemy_pyro_action_comic_panel_burning",
        reportDimensionsWithScaling: true,
        scaleX: 0.8,
        scaleY: 0.8,
    },

    $Box {
        styles: [
            {
                background: "transparent_black_texture",
                width: 500#points,
                alignSelf: align.flexEnd,
                flexDirection: flexDirection.row,
                paddingTop: 3#points,
                paddingLeft: 3#points,
                offsetX: 700.0,
            },
            {
                style_priority: 2,
                style_condition: state("enemy_action_anim"),
                offsetX: 0.0,
                style_animation: {
                    duration: 0.2,
                    delay: 0.8,
                    interpolation: interpolation.elastic_out
                }
            }
        ]
    } children [

        $Box {
            styles: [
                {
                    flexDirection: flexDirection.column,
                    width: 430#points,
                    alignItems: align.center
                }
            ]
        } children [
            $Label {
                font: "red_wing",
                text: "Burning",
                fontScale: 1.1,
                align: "left",
                color: color.white
            },
            $Box {
                styles: [
                    {
                        background: "white_texture",
                        height: 2#points,
                        width: 430#points
                    }
                ]
            },
            $Label {
                styles: [
                    {
                        width: 430#points
                    }
                ],
                font: "red_wing",
                text: "The Player gets the burning for 5 Revolver rotations",
                fontScale: 0.6,
                align: "left",
                wrap: true,
                color: color.white
            },
        ],
        $Box {
            styles: [
                {
                    background: "enemy_action_burning",
                    width: 70#points,
                    aspectRatio: 1.0
                }
            ]
        }
    ]
];

templates: [
    ...(sharedComponents.warningLabelTemplates),
    ...(sharedComponents.cardHoverDetailTemplates),
    encounterModifierDisplayTemplate,
    enemyActionAnimationTemplate
],

var buttonHoverBehaviour = $MouseHoverBehaviour {
    useSystemCursor: true,
    cursorName: "hand",
    disabled: {
        useSystemCursor: true,
        cursorName: "not allowed"
    }
};

var revolver = $Revolver {
    name: "revolver",
    slotTexture: "revolver_slot_texture",
    font: "vanilla_whale",
    fontColor: color.white,
    fontScale: 2.5,
    slotScale: 0.22,
    cardScale: 0.9,
    animationDuration: 0.2,
    radius: 140.0,
    radiusExtension: 60.0,
    cardZIndex: cardZIndicesStart,
    rotationOff: (pi / 2.0) + (2.0 * pi) / 5.0,
    background: "revolver_drum",
};

var cardHand = $CardHand {
    name: "card_hand",
    cardSize: cardHeight,
    hoveredCardScale: 1.3,
    maxCardSpacing: 100.0,
    startCardZIndicesAt: cardZIndicesStart,
    hoveredCardZIndex: cardZIndicesEnd - 1,
    draggedCardZIndex: cardZIndicesEnd,
    opacityIfNotPlayable: 0.5,
    centerGap: 300.0,
//    centerGap: 19.0,
    targetWidth: worldWidth * 0.6,
};

var enemyArea = $EnemyArea {
    name: "enemy_area",
    enemySelectionDrawable: "key_select_frame",
};

var reservesLabel = $TemplateLabel {
    name: "reserves_label",
    font: "red_wing",
    template: "{game.curReserves}/{game.baseReserves}",
    fontScale: 1.1,
    color: color.forty_white,
};

var disableStyles = [
    {
        style_priority: 1,
        alpha: 1.0,
        disabled: false,
    },
    {
        style_priority: 2,
        style_condition: state("uiFrozen"),
        alpha: 0.5,
        disabled: true
    }
];

//var attackPopup = $Box {
//    styles: [
//        {
//            style_priority: 1,
//            positionType: positionType.absolute,
//            background: "transparent_black_texture",
//            flexDirection: flexDirection.column,
//            alignItems: align.center,
//            justifyContent: justify.center,
//            width: worldWidth#points,
//            height: worldHeight#points,
//            detached: true
//        },
//        {
//            style_priority: 2,
//            style_condition: state("showAttackPopup"),
//            detached: false
//        }
//    ]
//} children [
//
//    $Label {
//        font: "red_wing",
//        text: "Parry",
//        fontScale: 0.9,
//        color: color.white,
//        behaviours: [
//            $CatchEventAndEmitBehaviour {
//                catch: "ButtonClickEvent",
//                emit: "ParryEvent"
//            }
//        ]
//    },
//    $Label {
//        font: "red_wing",
//        text: "Dont Parry",
//        fontScale: 0.9,
//        color: color.white,
//        behaviours: [
//            $CatchEventAndEmitBehaviour {
//                catch: "ButtonClickEvent",
//                emit: "PopupConfirmationEvent"
//            }
//        ]
//    },
//
//];

var enemyActionPopup = $Box {
    styles: [
        {
            style_priority: 1,
            positionType: positionType.absolute,
            background: "transparent_black_texture",
            flexDirection: flexDirection.row,
            alignItems: align.center,
            justifyContent: justify.center,
            width: worldWidth#points,
            height: worldHeight#points,
            detached: true
        },
        {
            style_priority: 2,
            style_condition: state(""),
            detached: false
        }
    ],
} children [

    $Box {
        styles: [
            {
                rotation: 4.0,
                width: 60#percent,
                positionLeft: 10#points
            }
        ],
        enableTransform: true
    } children [
        $TemplateLabel {
            font: "red_wing",
            template: "Nice Slot you have there... Would be a real shame if somebody...",
            wrap: true,
//            template: "{game.enemyActionPhrase}",
            fontScale: 1.8,
            color: color.black,
        },
    ],

    $Box {
    } children [
        $Image {
            textureName: "enemy_texture",
            reportDimensionsWithScaling: true,
            scaleX: 1.5,
            scaleY: 1.5,
        }
    ]

];

var popupActor = $Box {
    styles: [
        {
            style_priority: 1,
            positionType: positionType.absolute,
            background: "transparent_black_texture",
            flexDirection: flexDirection.column,
            alignItems: align.center,
            justifyContent: justify.center,
            width: worldWidth#points,
            height: worldHeight#points,
            detached: true
        },
        {
            style_priority: 2,
            style_condition: state("showPopup"),
            detached: false
        }
    ],
} children [

    $TemplateLabel {
        font: "red_wing",
        template: "{game.popupText}",
        fontScale: 0.9,
        color: color.white,
    },

    $TemplateLabel {
        styles: [
            {
                style_priority: 1,
                visible: false
            },
            {
                style_priority: 2,
                style_condition: state("showPopupConfirmationButton"),
                visible: true
            }
        ],
        font: "red_wing",
        template: "{game.popupButtonText}",
        fontScale: 0.9,
        color: color.white,
        behaviours: [
            $CatchEventAndEmitBehaviour {
                catch: "ButtonClickEvent",
                emit: "PopupConfirmationEvent"
            }
        ]
    },

    $Box {
        styles: [
            {
                style_priority: 1,
                detached: true,
            },
            {
                style_priority: 2,
                style_condition: state("showPopupCardSelector"),
                detached: false
            }
        ],
    } children [
        $CircularCardSelector {
            styles: [
                {
                    width: (50*10)#points,
                    height: (50*10)#points,
                }
            ],
            name: "card_selector",
            emptySlotTexture: "grey_texture",
            disabledAlpha: 0.6,
            radius: 200.0,
            size: 3570.0 * 0.04
        }
    ],

];

var drawCardActor = $Box {
    styles: [
        {
            style_priority: 1,
            positionType: positionType.absolute,
            background: "transparent_black_texture",
            flexDirection: flexDirection.column,
            alignItems: align.center,
            width: worldWidth#points,
            height: worldHeight#points,
            detached: true
        },
        {
            style_priority: 2,
            style_condition: state("showCardDrawActor"),
            detached: false
        }
    ],
    touchable: "enabled",
    zIndex: overlayZIndex,
} children [

    $TemplateLabel {
        styles: [
            {
                width: 100.0#percent
            }
        ],
        font: "red_wing",
        template: "draw {game.remainingCardsToDraw} card{game.remainingCardsToDrawPluralS}",
        fontScale: 1.8,
        align: "center",
        wrap: true,
        color: color.white
    },

    $Box {
        styles: [
            {
                flexDirection: flexDirection.row,
                justifyContent: justify.spaceAround,
                width: 100.0#percent
            }
        ],
    } children [

        $Box {
            styles: [
                {
                    flexDirection: flexDirection.column
                }
            ]
        } children [

            $TemplateLabel {
                styles: [
                    {
                        marginTop: 6.0#points,
                        marginBottom: -6.0#points
                    }
                ],
                font: "red_wing",
                template: "{game.cardsInStack} card{game.cardsInStackPluralS} remaining in stack",
                wrap: true,
                fontScale: 1.3,
                align: "center",
                color: color.white
            },

            $Image {
                textureName: "draw_bullet",
                reportDimensionsWithScaling: true,
                scaleX: 0.8,
                scaleY: 0.8,
                behaviours: [
                    $CatchEventAndEmitBehaviour {
                        catch: "ButtonClickEvent",
                        emit: "DrawCardEvent"
                    }
                ]
            }

        ],

    ]

];

var putCardsUnderDeckActor = $Box {
    styles: [
        {
            style_priority: 1,
            positionType: positionType.absolute,
            background: "transparent_black_texture",
            flexDirection: flexDirection.column,
            alignItems: align.center,
            justifyContent: justify.center,
            width: worldWidth#points,
            height: worldHeight#points,
            touchable: touchable.enabled,
            detached: true
        },
        {
            style_priority: 2,
            style_condition: state("showPutCardsUnderDeckActor"),
            detached: false
        }
    ],
    zIndex: overlayZIndex - 1,
    name: "putCardsUnderDeckActor"
} children [

    $Box {
        styles: [
            {
                width: 30#percent,
                height: 30#percent,
                flexDirection: flexDirection.row,
                alignItems: align.flexStart
            }
        ]
    } children [

            $Image {
                textureName: "draw_bullet",
                reportDimensionsWithScaling: true,
                scaleX: 0.4,
                scaleY: 0.4,
            },

            $PutCardsUnderDeckWidget {
                styles: [
                    {
                        width: 90#percent,
                        height: 90#percent,
                        background: "under_deck_background",
                    }
                ],
                name: "putCardsUnderDeckWidget",
                cardSize: cardHeight,
                cardSpacing: 10.0
            }

    ]

];

var playerBar = $Box {
    styles: [
        {
            width: 100#percent,
            height: 220#points,
            flexDirection: flexDirection.row,
            alignItems: align.center
        }
    ],
} children [

    $Box {
        styles: [
            {
                positionType: positionType.absolute,
                background: "player_bar",
                width: worldWidth#points,
                positionBottom: 0#points,
                aspectRatio: 1920.0 / 505.0,
            }
        ],
    },

    $Box {
        styles: [
            {
                positionType: positionType.absolute,
                alignItems: align.center,
                justifyContent: justify.center,
                aspectRatio: 1.0,
                width: 120#points,
                positionBottom: 180#points,
                positionLeft: 90#points,
                rotation: 15.0
            }
        ],
        enableTransform: true,
    } children [

        $Box {
            styles: [
                {
                    positionType: positionType.absolute,
                    width: 100#percent,
                    height: 100#percent,
                    background: "wood_box",
                }
            ]
        },

        $Box {
            styles: [
                {
                    positionType: positionType.absolute,
                    width: 60#points,
                    height: 60#points,
                    positionBottom: 90#points,
                    positionLeft: 30#points,
                    background: "reserves_texture",
                }
            ]
        },
        reservesLabel,
    ],

    // shoot button ---------------------------------------
    $Box {
        styles: [
            {
                style_priority: 1,
                positionType: positionType.absolute,
                height: 100#points,
                width: 270#points,
                positionBottom: 110#points,
            },
            {
                style_priority: 1,
                positionLeft: 380#points,
                style_animation: {
                    duration: 0.3,
                    interpolation: interpolation.pow2
                }
            },
            {
                style_priority: 2,
                style_condition: state("showAttackPopup"),
                positionLeft: (380 + 270)#points,
                style_animation: {
                    duration: 0.3,
                    interpolation: interpolation.pow2
                }
            },
        ],
    } children [
        $Box {
            styles: [
                {
                    style_priority: 1,
                    positionType: positionType.absolute,
                    aspectRatio: 655.0 / 543.0,
                    background: "shoot_button_texture",
                },
                {
                    style_priority: 2,
                    style_condition: hover("shoot_button_hover_box"),
                    background: "shoot_button_hover_texture",
                },
                {
                    style_priority: 1,
                    width: 250#points,
                    positionBottom: -60#points,
                    positionLeft: 0#points,
                    style_animation: {
                        duration: 0.1,
                        interpolation: interpolation.pow2
                    }
                },
                {
                    style_priority: 2,
                    style_condition: hover("shoot_button_hover_box"),
                    width: 270#points,
                    positionBottom: -70#points,
                    positionLeft: -10#points,
                    style_animation: {
                        duration: 0.1,
                        interpolation: interpolation.pow2
                    }
                },
            ],
        },
        $Box {
            name: "shoot_button_hover_box",
            styles: [
                {
                    style_priority: 1,
                    positionType: positionType.absolute,
                    width: 200#points,
                    height: 100#points,
                    positionLeft: 25#points,
                    positionBottom: 50#points,
                    rotation: -25.0,
                    disabled: false
                },
                {
                    style_priority: 2,
                    style_condition: state("uiFrozen"),
                    disabled: true,
                }
            ],
            behaviours: [
                buttonHoverBehaviour,
                $CatchEventAndEmitBehaviour {
                    catch: "ButtonClickEvent",
                    emit: "ShootRevolverEvent"
                }
            ],
            enableTransform: true,
            touchable: "enabled",
        }
    ],

    // pass button ---------------------------------------
    $Box {
        styles: [
            {
                positionType: positionType.absolute,
                style_priority: 1,
                height: 100#points,
                width: 270#points,
                positionBottom: 110#points,
            },
            {
                style_priority: 1,
                positionLeft: (380 + 270)#points,
                style_animation: {
                    duration: 0.3,
                    interpolation: interpolation.pow2
                }
            },
            {
                style_priority: 2,
                style_condition: state("showAttackPopup"),
                positionLeft: 380#points,
                style_animation: {
                    duration: 0.3,
                    interpolation: interpolation.pow2
                }
            },
        ],
    } children [
        $Box {
            styles: [
                {
                    style_priority: 1,
                    positionType: positionType.absolute,
                    aspectRatio: 655.0 / 543.0,
                    background: "pass_button_texture",
                },
                {
                    style_priority: 2,
                    style_condition: hover("pass_button_hover_box"),
                    background: "pass_button_hover_texture",
                },
                {
                    style_priority: 1,
                    width: 250#points,
                    positionBottom: -60#points,
                    positionLeft: 0#points,
                    style_animation: {
                        duration: 0.1,
                        interpolation: interpolation.pow2
                    }
                },
                {
                    style_priority: 2,
                    style_condition: hover("pass_button_hover_box"),
                    width: 270#points,
                    positionBottom: -70#points,
                    positionLeft: -10#points,
                    style_animation: {
                        duration: 0.1,
                        interpolation: interpolation.pow2
                    }
                },
            ],
        },
        $Box {
            name: "pass_button_hover_box",
            styles: [
                {
                    style_priority: 1,
                    positionType: positionType.absolute,
                    width: 200#points,
                    height: 100#points,
                    positionLeft: 25#points,
                    positionBottom: 50#points,
                    rotation: -25.0,
                    disabled: true
                },
                {
                    style_priority: 2,
                    style_condition: state("showAttackPopup"),
                    disabled: false,
                }
            ],
            behaviours: [
                buttonHoverBehaviour,
                $CatchEventAndEmitBehaviour {
                    catch: "ButtonClickEvent",
                    emit: "PopupConfirmationEvent"
                }
            ],
            enableTransform: true,
            touchable: "enabled",
        }
    ],

    // holster button ---------------------------------------
    $Box {
        styles: [
            {
                style_priority: 1,
                positionType: positionType.absolute,
                height: 100#points,
                width: 270#points,
                positionBottom: 119#points,
            },
            {
                style_priority: 1,
                positionLeft: 970#points,
                style_animation: {
                    duration: 0.3,
                    interpolation: interpolation.pow2
                }
            },
            {
                style_priority: 2,
                style_condition: state("showAttackPopup"),
                positionLeft: (970 - 270)#points,
                style_animation: {
                    duration: 0.3,
                    interpolation: interpolation.pow2
                }
            },
        ],
    } children [
        $Box {
            styles: [
                {
                    style_priority: 1,
                    positionType: positionType.absolute,
                    aspectRatio: 655.0 / 543.0,
                    background: "end_turn_button_texture",
                },
                {
                    style_priority: 2,
                    style_condition: hover("end_turn_button_hover_box"),
                    background: "end_turn_button_hover_texture",
                },
                {
                    style_priority: 1,
                    width: 250#points,
                    positionBottom: -60#points,
                    positionLeft: 0#points,
                    style_animation: {
                        duration: 0.1,
                        interpolation: interpolation.pow2
                    }
                },
                {
                    style_priority: 2,
                    style_condition: hover("end_turn_button_hover_box"),
                    width: 270#points,
                    positionBottom: -70#points,
                    positionLeft: -10#points,
                    style_animation: {
                        duration: 0.1,
                        interpolation: interpolation.pow2
                    }
                }
            ],
        },
        $Box {
            name: "end_turn_button_hover_box",
            styles: [
                {
                    style_priority: 1,
                    positionType: positionType.absolute,
                    width: 200#points,
                    height: 100#points,
                    positionLeft: 25#points,
                    positionBottom: 119#points,
                    rotation: -25.0,
                    disabled: false
                },
                {
                    style_priority: 2,
                    style_condition: state("uiFrozen"),
                    disabled: true,
                }
            ],
            behaviours: [
                buttonHoverBehaviour,
                $CatchEventAndEmitBehaviour {
                    catch: "ButtonClickEvent",
                    emit: "EndTurnEvent"
                }
            ],
            enableTransform: true,
            touchable: "enabled",
        }
    ],

    // parry button ---------------------------------------
    $Box {
        styles: [
            {
                style_priority: 1,
                positionType: positionType.absolute,
                height: 100#points,
                width: 270#points,
                positionBottom: 119#points,
            },
            {
                style_priority: 1,
                positionLeft: (970 - 270)#points,
                style_animation: {
                    duration: 0.3,
                    interpolation: interpolation.pow2
                }
            },
            {
                style_priority: 2,
                style_condition: state("showAttackPopup"),
                positionLeft: 970#points,
                style_animation: {
                    duration: 0.3,
                    interpolation: interpolation.pow2
                }
            },
        ],
    } children [
        $Box {
            styles: [
                {
                    style_priority: 1,
                    positionType: positionType.absolute,
                    aspectRatio: 655.0 / 543.0,
                    background: "parry_button_texture",
                },
                {
                    style_priority: 2,
                    style_condition: hover("parry_button_hover_box"),
                    background: "parry_button_hover_texture",
                },
                {
                    style_priority: 1,
                    width: 250#points,
                    positionBottom: -60#points,
                    positionLeft: 0#points,
                    style_animation: {
                        duration: 0.1,
                        interpolation: interpolation.pow2
                    }
                },
                {
                    style_priority: 2,
                    style_condition: hover("parry_button_hover_box"),
                    width: 270#points,
                    positionBottom: -70#points,
                    positionLeft: -10#points,
                    style_animation: {
                        duration: 0.1,
                        interpolation: interpolation.pow2
                    }
                }
            ],
        },
        $Box {
            name: "parry_button_hover_box",
            styles: [
                {
                    style_priority: 1,
                    positionType: positionType.absolute,
                    width: 200#points,
                    height: 100#points,
                    positionLeft: 25#points,
                    positionBottom: 50#points,
                    rotation: -25.0,
                    disabled: true
                },
                {
                    style_priority: 2,
                    style_condition: state("showAttackPopup"),
                    disabled: false,
                }
            ],
            behaviours: [
                buttonHoverBehaviour,
                $CatchEventAndEmitBehaviour {
                    catch: "ButtonClickEvent",
                    emit: "ParryEvent"
                }
            ],
            enableTransform: true,
            touchable: "enabled",
        }
    ],

    $Box {
        styles: [
            {
                positionType: positionType.absolute,
                alignItems: align.center,
                justifyContent: justify.center,
                aspectRatio: 1.0,
                width: 120#points,
                positionBottom: 200#points,
                positionLeft: (worldWidth - 90 - 120)#points,
                rotation: -15.0
            }
        ],
        enableTransform: true,
    } children [

        $Box {
            styles: [
                {
                    positionType: positionType.absolute,
                    width: 100#percent,
                    height: 100#percent,
                    background: "wood_box",
                }
            ]
        },

        $Box {
            styles: [
                {
                    positionType: positionType.absolute,
                    width: 60#points,
                    height: 60#points,
                    background: "deck_icon",
                }
            ]
        },
    ],

];

var encounterModifierDisplay = $Box {
    styles: [
        {
            positionType: positionType.absolute,
            width: worldWidth#points,
            height: worldHeight#points,
            positionTop: 0#points,
            positionLeft: 0#points,
            flexDirection: flexDirection.column,
            alignItems: align.center,
            justifyContent: justify.flexEnd,
        },
    ],
} children [

    $Box {
        name: "encounter_modifier_parent",
        styles: [
            {
                style_priority: 1,
                positionType: positionType.absolute,
                background: "encounter_modifier_background",
                width: 420.0#points,
                positionTop: 100#points,
                paddingTop: 10#points,
                paddingBottom: 10#points,
//                paddingLeft: 10#points,
            },
            {
                style_priority: 1,
                positionLeft: (worldWidth - 75.0)#points,
                style_animation: {
                    duration: 0.2,
                    interpolation: interpolation.linear
                }
            },
            {
                style_priority: 2,
                style_condition: hover(),
                positionLeft: (worldWidth - 400)#points,
                style_animation: {
                    duration: 0.2,
                    interpolation: interpolation.linear
                }
            }
        ],
        touchable: "enabled",
    } children [

    ],
];

var enemyActionAnimContainer = $Box {
    styles: [
        {
            positionType: positionType.absolute,
            width: worldWidth#points,
            height: worldHeight#points,
        }
    ],
    name: "enemy_action_animation_parent"
} children [
];

var gameScreen = $Box {
    styles: [
        {
            positionType: positionType.absolute,
            flexDirection: flexDirection.column,
            width: worldWidth#points,
            height: worldHeight#points,
            alignItems: align.center,
            justifyContent: justify.flexEnd,
        }
    ],
} children [

    $Box {
        styles: [
            {
                flexGrow: 1.0
            }
        ]
    },

    $EnemyArea {
        styles: [
            {
                width: 70#percent,
                height: 100#points,
                positionLeft: 800#points,
                positionBottom: -300#points,
            }
        ],
        ...enemyArea
    },

    $Revolver {
        styles: [
            {
                positionBottom: -260#points
            }
        ],
        zIndex: 100,
        ...revolver
    },

    playerBar,

    $CardHand {
        styles: [
            {
                width: 100#percent,
                height: 0#points,
            },
            {
                style_condition: state("showPutCardsUnderDeckActor"),
                positionTop: 314#points,
            }
        ],
        zIndex: 200,
        ...cardHand
    },

];

var playerOverlay = $Box {
    styles: [
        {
            positionType: positionType.absolute,
            background: "game_screen_player",
            flexDirection: flexDirection.column,
            alignItems: align.center,
            positionLeft: 20#points,
            width: worldWidth#points,
            height: worldHeight#points,
        },
    ],
    zIndex: 0,
};

root: $Box {
    styles: [
        {
            width: worldWidth#points,
            height: worldHeight#points,
            flexDirection: flexDirection.column,
            positionType: positionType.relative
        }
    ]
} children [

    sharedComponents.tutorialInfoActor,

    $Box {
        styles: [
            {
                positionType: positionType.absolute,
                width: worldWidth#points,
                height: worldHeight#points,
                positionLeft: 0#points,
                positionTop: 0#points
            }
        ]
    } children [

        $Statusbar {
            options: [
            ],
            ...(sharedComponents.statusbarLeftDefaults)
        },

        $StatusEffectDisplay {
            styles: [
                {
                    positionLeft: 30#percent
                }
            ],
            name: "status_effect_display",
            font: "red_wing",
            fontColor: color.black,
            fontScale: 0.6,
        },

    ],

    sharedComponents.warningParent,
    encounterModifierDisplay,
    playerOverlay,
    gameScreen,
    enemyActionAnimContainer,
    drawCardActor,
    popupActor,
    putCardsUnderDeckActor,
    enemyActionPopup
]
