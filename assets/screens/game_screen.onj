
import "config/game_config.onj" as gameConfig;
import "config/graphics_config.onj" as graphicsConfig;
import "imports/colors.onj" as color;
import "screens/input_maps.onj" as inputMaps;

use Common;
use Screen;
use Style;

var pi = 3.141;

var worldWidth = 160.0;
var worldHeight = 90.0;

var cardScale = 0.028;
var cardHeight = 596.0 * cardScale;

var cardZIndicesStart = 100;
var cardZIndicesEnd = cardZIndicesStart + 100;
var overlayZIndex = 500;

assets: {
    useCardAtlas: true,
    useAssets: [

        "vanilla_whale", "red_wing",

        "game_screen_background", "revolver_slot_texture", "enemy_texture", "end_turn_button_texture",
        "end_turn_button_texture_hover", "shoot_button_texture", "shoot_button_texture_hover", "revolver_drum",
        "heart_texture", "reserves_texture", "hit_overlay", "draw_bullet", "draw_cover", "grey_texture",

        "revolver_cursor",

        ...(graphicsConfig.keySelectUsedAssets),
        ...(graphicsConfig.gameUsedAssets),
    ]
},

viewport: $FitViewport {
    worldWidth: worldWidth,
    worldHeight: worldHeight
},

var controller = $GameScreenController {
    cardsFile: "cards/cards.onj",
    cardHand: {
        actorName: "card_hand"
    },
    revolver: {
        actorName: "revolver",
        dropBehaviour: $RevolverDropTarget {
          group: "card"
        }
    },
    enemyArea: {
        actorName: "enemy_area",
    },
    cardSelector: {
        actorName: "card_selector"
    },
    cardDragBehaviour: $CardDragSource {
        group: "card"
    },
    cardsToDrawInFirstRound: gameConfig.cardDrawConfig.firstRound,
    cardsToDraw: gameConfig.cardDrawConfig.roundStart,
    maxCards: gameConfig.cardDrawConfig.maxCards,
    playerLives: gameConfig.playerConfig.lives,
    reservesAtRoundBegin: gameConfig.reservesConfig.roundStart,
    shotEmptyDamage: gameConfig.damageConfig.shotEmptyDamage,
};

options: {
    background: "game_screen_background",
    screenController: controller,
    inputMap: [
        ...(inputMaps.gameInputMap),
        ...(inputMaps.defaultInputMap)
    ]
},

var buttonHoverBehaviour = $MouseHoverBehaviour {
    useSystemCursor: true,
    cursorName: "hand",
    disabled: {
        useSystemCursor: true,
        cursorName: "not allowed"
    }
};

var revolver = $Revolver {
    name: "revolver",
    slotTexture: "revolver_slot_texture",
    font: "vanilla_whale",
    fontColor: color.white,
    fontScale: 0.25,
    slotScale: 0.04,
    cardScale: 0.8,
    animationDuration: 0.2,
    radius: 17.0,
    radiusExtension: 7.0,
    cardZIndex: cardZIndicesStart,
    rotationOff: (pi / 2.0) + (2.0 * pi) / 5.0,
    background: "revolver_drum",
};

var cardHand = $CardHand {
    name: "card_hand",
    cardSize: cardHeight,
    hoveredCardScale: 1.3,
    cardSpacing: 1.0,
    startCardZIndicesAt: cardZIndicesStart,
    hoveredCardZIndex: cardZIndicesEnd - 1,
    draggedCardZIndex: cardZIndicesEnd,
    opacityIfNotPlayable: 0.5,
    targetWidth: worldWidth * 0.6,
};

var enemyArea = $EnemyArea {
    name: "enemy_area",
    enemySelectionDrawable: "key_select_frame"
};

var shootButton = $Image {
    name: "shoot_button_texture",
    textureName: "shoot_button_texture",
    reportDimensionsWithScaling: true,
    scaleX: 0.03,
    scaleY: 0.03,
    behaviours: [
        buttonHoverBehaviour,
        $CatchEventAndEmitBehaviour {
            catch: "ButtonClickEvent",
            emit: "ShootRevolverEvent"
        }
    ]
};

var endTurnButton = $Image {
    name: "end_turn_button",
    reportDimensionsWithScaling: true,
    scaleX: 0.03,
    scaleY: 0.03,
    behaviours: [
        buttonHoverBehaviour,
        $CatchEventAndEmitBehaviour {
            catch: "ButtonClickEvent",
            emit: "EndTurnEvent"
        }
    ]
};

var playerLivesLabel = $TemplateLabel {
    name: "player_lives_label",
    font: "vanilla_whale",
    template: "{stat.playerLives}/{game.basePlayerLives}",
    fontScale: 0.09,
    color: color.white,
};

var reservesLabel = $TemplateLabel {
    name: "reserves_label",
    font: "vanilla_whale",
    template: "{game.curReserves}/{game.baseReserves}",
    fontScale: 0.09,
    color: color.white,
};

var disableStyles = [
    {
        style_priority: 1,
        alpha: 1.0,
        disabled: false,
    },
    {
        style_priority: 2,
        style_condition: state("uiFrozen"),
        alpha: 0.5,
        disabled: true
    }
];

var attackPopup = $Box {
    styles: [
        {
            style_priority: 1,
            positionType: positionType.absolute,
            background: "transparent_black_texture",
            flexDirection: flexDirection.column,
            alignItems: align.center,
            justifyContent: justify.center,
            width: 100.0#percent,
            height: 100.0#percent,
            detached: true
        },
        {
            style_priority: 2,
            style_condition: state("showAttackPopup"),
            detached: false
        }
    ]
} children [

    $Label {
        font: "red_wing",
        text: "Parry",
        fontScale: 0.09,
        color: color.white,
        behaviours: [
            $CatchEventAndEmitBehaviour {
                catch: "ButtonClickEvent",
                emit: "ParryEvent"
            }
        ]
    },
    $Label {
        font: "red_wing",
        text: "Dont Parry",
        fontScale: 0.09,
        color: color.white,
        behaviours: [
            $CatchEventAndEmitBehaviour {
                catch: "ButtonClickEvent",
                emit: "PopupConfirmationEvent"
            }
        ]
    },

];

var popupActor = $Box {
    styles: [
        {
            style_priority: 1,
            positionType: positionType.absolute,
            background: "transparent_black_texture",
            flexDirection: flexDirection.column,
            alignItems: align.center,
            justifyContent: justify.center,
            width: 100.0#percent,
            height: 100.0#percent,
            detached: true
        },
        {
            style_priority: 2,
            style_condition: state("showPopup"),
            detached: false
        }
    ],
} children [

    $TemplateLabel {
        font: "red_wing",
        template: "{game.popupText}",
        fontScale: 0.09,
        color: color.white,
    },

    $TemplateLabel {
        styles: [
            {
                style_priority: 1,
                visible: false
            },
            {
                style_priority: 2,
                style_condition: state("showPopupConfirmationButton"),
                visible: true
            }
        ],
        font: "red_wing",
        template: "{game.popupButtonText}",
        fontScale: 0.09,
        color: color.white,
        behaviours: [
            $CatchEventAndEmitBehaviour {
                catch: "ButtonClickEvent",
                emit: "PopupConfirmationEvent"
            }
        ]
    },

    $Box {
        styles: [
            {
                style_priority: 1,
                detached: true,
            },
            {
                style_priority: 2,
                style_condition: state("showPopupCardSelector"),
                detached: false
            }
        ],
    } children [
        $CircularCardSelector {
            styles: [
                {
                    width: 50#points,
                    height: 50#points,
                }
            ],
            name: "card_selector",
            emptySlotTexture: "grey_texture",
            disabledAlpha: 0.6,
            radius: 20.0,
            size: 357.0 * 0.04
        }
    ],

];

var drawCardActor = $Box {
    styles: [
        {
            style_priority: 1,
            positionType: positionType.absolute,
            background: "transparent_black_texture",
            flexDirection: flexDirection.column,
            alignItems: align.center,
            width: 100.0#percent,
            height: 100.0#percent,
            detached: true
        },
        {
            style_priority: 2,
            style_condition: state("showCardDrawActor"),
            detached: false
        }
    ],
    zIndex: overlayZIndex,
} children [

    $TemplateLabel {
        styles: [
            {
                width: 100.0#percent
            }
        ],
        font: "red_wing",
        template: "draw {game.remainingCardsToDraw} card{game.remainingCardsToDrawPluralS}",
        fontScale: 0.18,
        align: "center",
        wrap: true,
        color: color.white
    },

    $Box {
        styles: [
            {
                flexDirection: flexDirection.row,
                justifyContent: justify.spaceAround,
                width: 100.0#percent
            }
        ],
    } children [

        $Box {
            styles: [
                {
                    flexDirection: flexDirection.column
                }
            ]
        } children [

            $TemplateLabel {
                styles: [
                    {
                        marginTop: 6.0#points,
                        marginBottom: -6.0#points
                    }
                ],
                font: "red_wing",
                template: "{game.cardsInStack} card{game.cardsInStackPluralS} remaining in stack",
                wrap: true,
                fontScale: 0.13,
                align: "center",
                color: color.white
            },

            $Image {
                textureName: "draw_bullet",
                reportDimensionsWithScaling: true,
                scaleX: 0.08,
                scaleY: 0.08,
                behaviours: [
                    $CatchEventAndEmitBehaviour {
                        catch: "ButtonClickEvent",
                        emit: "DrawCardEvent"
                    }
                ]
            }

        ],

    ]

];

var gameScreen = $Box {
    styles: [
        {
            positionType: positionType.absolute,
            flexDirection: flexDirection.column,
            width: 100.0#percent,
            height: 100.0#percent
        }
    ]
} children [

    $Box {
        styles: [
            {
                width: 100.0#percent,
                flexDirection: flexDirection.row
            }
        ],
    } children [

        $Image {
            styles: [
                {
                    aspectRatio: 1.0,
                    height: 90.0#percent,
                }
            ],
            reportDimensionsWithScaling: true,
            textureName: "heart_texture",
            scaleX: 0.003,
            scaleY: 0.003,
        },

        playerLivesLabel,

//        $Box {
//            styles: [
//                {
//                    flexGrow: 1.0
//                }
//            ]
//        },

    ],

    $Box {
        styles: [
            {
                flexDirection: flexDirection.row,
                width: 100.0#percent,
                flexGrow: 1.0
            }
        ]
    } children [

        $Box {
            styles: [
                {
                    flexDirection: flexDirection.column,
                    width: 30.0#percent,
                    alignItems: align.center,
                    positionLeft: 5.0#points,
                }
            ]
        } children [

            revolver,

            $Image {
                styles: [
                    {
                        style_priority: 1,
                        aspectRatio: 569.0 / 164.0,
                        height: 5.0#points,
                        background: "shoot_button_texture"
                    },
                    {
                        style_priority: 2,
                        style_condition: hover(),
                        background: "shoot_button_texture_hover"
                    },
                    ...disableStyles
                ],
                ...shootButton
            }

        ],

        $EnemyArea {
            styles: [
                {
                    flexGrow: 1.0
                }
            ],
            ...enemyArea
        }

    ],

    $Box {
        styles: [
            {
                flexDirection: flexDirection.row,
                width: 100.0#percent,
                height: (cardHeight + 5.0)#points,
                justifyContent: justify.center,
                alignItems: align.center
            }
        ]
    } children [

        $Image {
            styles: [
                {
                    aspectRatio: 1.0,
                    width: 8.0#points
                }
            ],
            reportDimensionsWithScaling: true,
            textureName: "reserves_texture",
            scaleX: 0.002,
            scaleY: 0.002
        },

        reservesLabel,

        $CardHand {
            styles: [
                {
                    flexGrow: 1.0,
                    height: cardHeight#points,
                }
            ],
            ...cardHand
        },

        $Image {
            styles: [
                {
                    style_priority: 1,
                    aspectRatio: 569.0 / 164.0,
                    height: 5.0#points,
                    background: "end_turn_button_texture"
                },
                {
                    style_priority: 2,
                    style_condition: hover(),
                    background: "end_turn_button_texture_hover"
                },
                ...disableStyles
            ],
            ...endTurnButton
        }

    ]

];

root: $Box {
    styles: [
        {
            width: 100.0#percent,
            height: 100.0#percent
        }
    ]
} children [
    gameScreen, drawCardActor, popupActor, attackPopup
]
