
import "config/game_config.onj" as gameConfig;
import "imports/colors.onj" as color;
import "screens/screen_commons.onj" as screenCommons;

use Common;
use Experimental__Screen;
use Experimental__Style;

var pi = 3.141;

var worldWidth = 160.0;
var worldHeight = 90.0;

var cardScale = 0.028;
var cardHeight = 596.0 * cardScale;

var cardZIndicesStart = 100;
var cardZIndicesEnd = cardZIndicesStart + 100;
var overlayZIndex = 500;

assets: {
    fonts: [

        $DistanceFieldFont {
            name: "vanilla_whale",
            fontFile: "fonts/vanilla_whale.fnt",
            imageFile: "fonts/vanilla_whale.png"
        },

        $DistanceFieldFont {
            name: "red_wing",
            fontFile: "fonts/red_wing.fnt",
            imageFile: "fonts/red_wing.png"
        }

    ],
    textureAtlases: [

        {
            file: "textures/packed/game_screen/game_screen.atlas",
            defines: [
                "background", "revolver_slot", "enemy", "normal_bullet", "end_turn", "end_turn_hover",
                "shoot", "shoot_hover", "enemy_turn_banner", "player_turn_banner", "revolver_drum",
                "heart", "reserves", "hit_overlay", "burning_icon", "insult_icon", "shield_icon",
                "poison_icon", "draw_bullet", "draw_cover"
            ]
        }

    ],
    cursors: [
        {
            name: "cursor",
            file: "textures/cursors/revolver.png",
            hotspotX: 0,
            hotspotY: 0
        }
    ],
    postProcessors: [
        {
            name: "earthquake",
            vertexShader: "shaders/earthquake/earthquake.vert",
            fragmentShader: "shaders/earthquake/earthquake.frag",
            timeOffset: 2_000,
            uniforms: [ "time" ],
            args: null
        },
        {
            name: "default",
            vertexShader: "shaders/default/default.vert",
            fragmentShader: "shaders/default/default.frag",
            timeOffset: 0,
            uniforms: [],
            args: null
        },
        {
            name: "vignette",
            vertexShader: "shaders/vignette/vignette.vert",
            fragmentShader: "shaders/vignette/vignette.frag",
            timeOffset: 0,
            uniforms: [ "time", "resolution" ],
            args: {
                color: color("ff0000"),
                speed: 0.0,
                movement: 1.0,
                minMovement: 0.3
            }
        }
    ],
    colorTextures: [
        {
            name: "transparent_black",
            color: color.backgroundTransparent
        },
        {
            name: "black",
            color: color.black
        },
        {
            name: "white",
            color: color.white
        }
    ],
    particles: [
        {
            name: "dust",
            particlePath: "particles/dust.particle",
            textureDir: "textures/particles",
            scale: 0.1
        },
        {
            name: "dust_explosion",
            particlePath: "particles/dust_explosion.particle",
            textureDir: "textures/particles",
            scale: 0.1
        }
    ],
    ninepatches: [
//        {
//            name: "hover_detail_background",
//            file: "textures/ninepatches/hover_detail_background.png",
//            top: 14,
//            bottom: 14,
//            left: 14,
//            right: 14,
//            scale: 0.1
//        },
        {
            name: "cover_hook",
            file: "textures/ninepatches/cover_hook.png",
            top: 1,
            bottom: 1,
            left: 6,
            right: 6,
            scale: 0.2
        }
    ]
},

viewport: $FitViewport {
    worldWidth: worldWidth,
    worldHeight: worldHeight
},

var controller = $GameScreenController {
    cardsFile: "cards/cards.onj",
    cardAtlasFile: "cards/generated/cards.atlas",
    cardHand: {
        actorName: "card_hand"
    },
    revolver: {
        actorName: "revolver",
        dropBehaviour: $RevolverDropTarget {
          group: "card"
        }
    },
    enemyArea: {
        actorName: "enemy_area",
        enemies: [ gameConfig.enemyConfig.startEnemy ]
    },
    coverArea: {
        actorName: "cover_area",
        dropBehaviour: $CoverAreaDropTarget {
            group: "card"
        }
    },
    cardDragBehaviour: $CardDragSource {
        group: "card"
    },
    enemies: gameConfig.enemyConfig.enemies,
    cardDrawActor: "card_draw_table",
    playerLivesLabelName: "player_lives_label",
    shootButtonName: "shoot_button",
    endTurnButtonName: "end_turn_button",
    reservesLabelName: "reserves_label",
    destroyCardInstructionActor: "destroy_card_instruction_label",
    winScreen: "screens/win_screen.onj",
    looseScreen: "screens/loose_screen.onj",
    cardsToDrawInFirstRound: gameConfig.cardDrawConfig.firstRound,
    cardsToDraw: gameConfig.cardDrawConfig.roundStart,
    maxCards: gameConfig.cardDrawConfig.maxCards,
    playerLives: gameConfig.playerConfig.lives,
    reservesAtRoundBegin: gameConfig.reservesConfig.roundStart,
    shotEmptyDamage: gameConfig.damageConfig.shotEmptyDamage,
};

options: {
    background: "background",
    screenController: controller,
    inputMap: screenCommons.defaultInputMap
},

var buttonHoverBehaviour = $MouseHoverBehaviour {
    useSystemCursor: true,
    cursorName: "hand",
    disabled: {
        useSystemCursor: true,
        cursorName: "not allowed"
    }
};

var revolver = $Revolver {
    name: "revolver",
    slotTexture: "revolver_slot",
    font: "vanilla_whale",
    fontColor: color.white,
    fontScale: 0.25,
    slotScale: 0.04,
    cardScale: cardScale * 0.8,
    animationDuration: 0.2,
    radius: 17.0,
    radiusExtension: 7.0,
    cardZIndex: cardZIndicesStart,
    rotationOff: (pi / 2.0) + (2.0 * pi) / 5.0,
//    ...sharedDetailTextKeys,
//    detailOffsetX: 0.0,
//    detailOffsetY: 0.0,
    background: "revolver_drum",
//    debug: true
};

var cardHand = $CardHand {
    name: "card_hand",
    cardScale: cardScale,
    hoveredCardScale: cardScale * 1.3,
    cardSpacing: 1.0,
    startCardZIndicesAt: cardZIndicesStart,
    hoveredCardZIndex: cardZIndicesEnd - 1,
    draggedCardZIndex: cardZIndicesEnd,
//    detailOffsetX: 0.0,
//    detailOffsetY: 1.5,
    targetWidth: worldWidth * 0.6,
//    ...sharedDetailTextKeys,
//    debug: true
};

var enemyArea = $EnemyArea {
     name: "enemy_area",
//     debug: true
};

var coverArea = $CoverArea {
    name: "cover_area",
    numStacks: gameConfig.coverConfig.numStacks,
    maxCards: gameConfig.coverConfig.maxCards,
    onlyAllowAddingOnTheSameTurn: gameConfig.coverConfig.onlyAllowAddingOnTheSameTurn,
    infoFont: "vanilla_whale",
    infoFontColor: color.black,
    infoFontScale: 0.1,
//    stackBackgroundTexture: "transparent_black",
//    stackSpacing: 2.0,
    areaSpacing: 4.0,
    cardScale: cardScale * 0.8,
//    stackMinSize: 20.0,
    detailFont: "red_wing",
    detailFontColor: color.white,
    detailFontScale: 0.07,
    cardDeltaX: 5.5,
    cardDeltaY: -3.0,
    cardInitialX: 0.5,
    cardInitialY: 9.0,
    stackHeight: 27.0,
    stackMinWidth: 15.0,
    stackHook: "cover_hook"
//    ...sharedDetailTextKeys,
//    detailOffsetX: 0.0,
//    detailOffsetY: 0.0,
//    debug: true
};

var shootButton = $Image {
    name: "shoot_button",
    textureName: "shoot",
    reportDimensionsWithScaling: true,
    scaleX: 0.03,
    scaleY: 0.03,
    behaviours: [
        $OnClickChangePostProcessorBehaviour {
            postProcessor: "earthquake",
            duration: 70,
            setOnlyIfNoPostProcessorIsSet: false
        },
        $ShootButtonBehaviour { },
        buttonHoverBehaviour,
        $OnHoverChangeTextureBehaviour {
            hoverTexture: "shoot_hover"
        }
    ]
};

var endTurnButton = $Image {
    name: "end_turn_button",
    textureName: "end_turn",
    reportDimensionsWithScaling: true,
    scaleX: 0.03,
    scaleY: 0.03,
    behaviours: [
        $EndTurnButtonBehaviour { },
        buttonHoverBehaviour,
        $OnHoverChangeTextureBehaviour {
            hoverTexture: "end_turn_hover"
        }
    ]
};

var playerLivesLabel = $TemplateLabel {
    name: "player_lives_label",
    font: "vanilla_whale",
    template: "{game.curPlayerLives}/{game.basePlayerLives}",
    fontScale: 0.09,
    color: color.white,
//    backgroundTexture: "black",
//    debug: true
};

var reservesLabel = $TemplateLabel {
    name: "reserves_label",
    font: "vanilla_whale",
    template: "{game.curReserves}/{game.baseReserves}",
    fontScale: 0.09,
    color: color.white,
//    backgroundTexture: "black"
};

var destroyCardInstructionActor = $Label {
    name: "destroy_card_instruction_label",
    font: "vanilla_whale",
    text: "Choose a card to destroy!",
    fontScale: 0.2,
    align: "center",
    color: color.black,
//    debug: true
};

var drawCardActor = $Box {
    properties: [
        position("absolute"),
        background("transparent_black"),
        flexDirection("column"),
        alignItems("center"),
        relWidth(100.0),
        relHeight(100.0)
    ],
    name: "card_draw_table",
    visible: false,
    zIndex: overlayZIndex,
//    debug: true
} children [

    $TemplateLabel {
        properties: [
            relWidth(100.0)
        ],
        font: "red_wing",
        template: "draw {game.remainingCardsToDraw} card{game.remainingCardsToDrawPluralS}",
        fontScale: 0.18,
        align: "center",
        wrap: true,
//        debug: true,
        color: color.white
    },

    $Box {
        properties: [
            flexDirection("row"),
            justifyContent("space around"),
            relWidth(100.0)
        ],
//        debug: true
    } children [

        $Box {
            properties: [
                flexDirection("column")
            ]
        } children [

            $TemplateLabel {
                properties: [
                    margin(0.0, 0.0, 6.0, -6.0)
                ],
                font: "red_wing",
                template: "{game.remainingBullets} bullet{game.remainingBulletsPluralS} remaining in stack",
                wrap: true,
                fontScale: 0.13,
                align: "center",
                color: color.white
            },

            $Image {
                properties: [
                ],
                textureName: "draw_bullet",
                reportDimensionsWithScaling: true,
                scaleX: 0.08,
                scaleY: 0.08,
                behaviours: [ $DrawBulletButtonBehaviour { }, buttonHoverBehaviour ]
            }

        ],

        $Box {
            properties: [
                flexDirection("column"),
            ]
        } children [

            $TemplateLabel {
                properties: [
                    margin(0.0, 0.0, 6.0, -6.0)
                ],
                font: "red_wing",
                template: "{game.remainingCovers} cover{game.remainingCoversPluralS} remaining in stack",
                wrap: true,
                fontScale: 0.13,
                align: "center",
                color: color.white
            },

            $Image {
                properties: [
                ],
                textureName: "draw_cover",
                reportDimensionsWithScaling: true,
                scaleX: 0.08,
                scaleY: 0.08,
                behaviours: [ $DrawCoverCardButtonBehaviour { }, buttonHoverBehaviour ]
            }

        ]

    ]

];

var gameScreen = $Box {
    properties: [
        position("absolute"),
        flexDirection("column"),
        relWidth(100.0),
        relHeight(100.0)
    ],
    //    debug: true
} children [

    $Box {
        properties: [
            flexDirection("row"),
            relWidth(100.0),
            alignItems("center")
        ],
//        debug: true
    } children [
        $Image {
            properties: [
                aspectRatio(1.0),
                relHeight(90.0)
            ],
            reportDimensionsWithScaling: true,
            textureName: "heart",
            scaleX: 0.003,
            scaleY: 0.003,
//            debug: true
        },
        playerLivesLabel,
        destroyCardInstructionActor
    ],


    $Box {
        properties: [
            flexDirection("row"),
            relWidth(100.0),
            flexGrow(1.0)
        ],
        //        debug: true
    } children [

        $Revolver {
            properties: [
                relWidth(40.0),
                margin(5.0, 0.0, 0.0, 10.0)
            ],
//            debug: true,
            ...revolver,
        },

        $Box {
            properties: [
                flexDirection("column"),
                relWidth(60.0),
                margin(-5.0, 0.0, 0.0, 0.0)
            ],
            //            debug: true
        } children [

            $Box {
                properties: [
                    flexDirection("row"),
                    flexGrow(1.0)
                ],
    //                debug: true
            } children [

                $CoverArea {
                    properties: [
                        flexGrow(0.5)
                    ],
                    ...coverArea
                },

                $EnemyArea {
                    properties: [
                        flexGrow(0.5)
                    ],
                    ...enemyArea
                }

            ],

            $Box {
                properties: [
                    flexDirection("row"),
                    justifyContent("space between")
                ],
    //                debug: true
            } children [
                shootButton,
                $Box {
                    properties: [
                        flexDirection("row")
                    ]
                } children [
                    $Image {
                        reportDimensionsWithScaling: true,
                        textureName: "reserves",
                        scaleX: 0.05,
                        scaleY: 0.05
                    },
                    reservesLabel
                ],
                endTurnButton,
            ],

            $CardHand {
                properties: [
                    height(cardHeight),
                    relWidth(100.0)
                ],
//                debug: true,
                ...cardHand
            }

        ]

    ]

];

root: $Box {
    properties: [
        relWidth(100.0),
        relHeight(100.0)
    ]
} children [
    gameScreen, drawCardActor
]
