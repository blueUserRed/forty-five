
import "config/game_config.onj" as gameConfig;
import "config/graphics_config.onj" as graphicsConfig;
import "imports/colors.onj" as color;
import "screens/input_maps.onj" as inputMaps;

use Common;
use Screen;
use Style;

var pi = 3.141;

var worldWidth = 160.0;
var worldHeight = 90.0;

var cardScale = 0.028;
var cardHeight = 596.0 * cardScale;

var cardZIndicesStart = 100;
var cardZIndicesEnd = cardZIndicesStart + 100;
var overlayZIndex = 500;

assets: {
    useCardAtlas: true,
    useAssets: [

        "vanilla_whale", "red_wing",

        "game_screen_background", "revolver_slot_texture", "enemy_texture", "end_turn_button_texture",
        "end_turn_button_texture_hover", "shoot_button_texture", "shoot_button_texture_hover", "revolver_drum",
        "heart_texture", "reserves_texture", "hit_overlay", "draw_bullet", "draw_cover",

        "revolver_cursor",

        "earthquake_shader",

        "transparent_black_texture",

        "cover_hook", "key_select_frame",

//        "film_shader", // TODO: remove

        ...(graphicsConfig.bannerAnimationUsedAssets),
        ...(graphicsConfig.statusEffectsUsedAssets),
        ...(graphicsConfig.damageOverlayUsedAssets),
        ...(graphicsConfig.destroyCardUsedAssets),
        ...(graphicsConfig.coverStackUsedAssets),
        ...(graphicsConfig.textAnimationUsedAssets),
        ...(graphicsConfig.cardDetailUsedAssets),
        ...(graphicsConfig.keySelectUsedAssets),
        ...(graphicsConfig.enemyUsedAssets)
    ]
},

viewport: $FitViewport {
    worldWidth: worldWidth,
    worldHeight: worldHeight
},

var controller = $GameScreenController {
    cardsFile: "cards/cards.onj",
    cardHand: {
        actorName: "card_hand"
    },
    revolver: {
        actorName: "revolver",
        dropBehaviour: $RevolverDropTarget {
          group: "card"
        }
    },
    enemyArea: {
        actorName: "enemy_area",
        enemies: gameConfig.enemyConfig.startEnemies
    },
    coverArea: {
        actorName: "cover_area",
        dropBehaviour: $CoverAreaDropTarget {
            group: "card"
        }
    },
    cardDragBehaviour: $CardDragSource {
        group: "card"
    },
    enemies: gameConfig.enemyConfig.enemies,
    cardDrawActor: "card_draw_table",
    playerLivesLabelName: "player_lives_label",
    shootButtonName: "shoot_button_texture",
    endTurnButtonName: "end_turn_button",
    reservesLabelName: "reserves_label",
    destroyCardInstructionActor: "destroy_card_instruction_label",
    winScreen: "screens/win_screen.onj",
    looseScreen: "screens/loose_screen.onj",
    cardsToDrawInFirstRound: gameConfig.cardDrawConfig.firstRound,
    cardsToDraw: gameConfig.cardDrawConfig.roundStart,
    maxCards: gameConfig.cardDrawConfig.maxCards,
    playerLives: gameConfig.playerConfig.lives,
    reservesAtRoundBegin: gameConfig.reservesConfig.roundStart,
    shotEmptyDamage: gameConfig.damageConfig.shotEmptyDamage,
};

options: {
    background: "game_screen_background",
    screenController: controller,
    inputMap: [
        ...(inputMaps.gameInputMap),
        ...(inputMaps.defaultInputMap)
    ]
},

var buttonHoverBehaviour = $MouseHoverBehaviour {
    useSystemCursor: true,
    cursorName: "hand",
    disabled: {
        useSystemCursor: true,
        cursorName: "not allowed"
    }
};

var revolver = $Revolver {
    name: "revolver",
    slotTexture: "revolver_slot_texture",
    font: "vanilla_whale",
    fontColor: color.white,
    fontScale: 0.25,
    slotScale: 0.04,
    cardScale: cardScale * 0.8,
    animationDuration: 0.2,
    radius: 17.0,
    radiusExtension: 7.0,
    cardZIndex: cardZIndicesStart,
    rotationOff: (pi / 2.0) + (2.0 * pi) / 5.0,
    background: "revolver_drum",
//    debug: true
};

var cardHand = $CardHand {
    name: "card_hand",
    cardScale: cardScale,
    hoveredCardScale: cardScale * 1.3,
    cardSpacing: 1.0,
    startCardZIndicesAt: cardZIndicesStart,
    hoveredCardZIndex: cardZIndicesEnd - 1,
    draggedCardZIndex: cardZIndicesEnd,
    targetWidth: worldWidth * 0.6,
};

var enemyArea = $EnemyArea {
    name: "enemy_area",
    enemySelectionDrawable: "key_select_frame"
};

var coverArea = $CoverArea {
    name: "cover_area",
    numStacks: gameConfig.coverConfig.numStacks,
    maxCards: gameConfig.coverConfig.maxCards,
    onlyAllowAddingOnTheSameTurn: gameConfig.coverConfig.onlyAllowAddingOnTheSameTurn,
    infoFont: "vanilla_whale",
    infoFontColor: color.black,
    infoFontScale: 0.1,
    areaSpacing: 4.0,
    cardScale: cardScale * 0.8,
    detailFont: "red_wing",
    detailFontColor: color.white,
    detailFontScale: 0.07,
    cardDeltaX: 5.5,
    cardDeltaY: -3.0,
    cardInitialX: 0.5,
    cardInitialY: 9.0,
    stackHeight: 27.0,
    stackMinWidth: 15.0,
    stackHook: "cover_hook",
    zIndex: 3
};

var shootButton = $Image {
    name: "shoot_button_texture",
    textureName: "shoot_button_texture",
    reportDimensionsWithScaling: true,
    scaleX: 0.03,
    scaleY: 0.03,
    behaviours: [
        $ShootButtonBehaviour { },
        buttonHoverBehaviour,
        $OnHoverChangeTextureBehaviour {
            hoverTexture: "shoot_button_texture_hover"
        }
    ]
};

var endTurnButton = $Image {
    name: "end_turn_button",
    textureName: "end_turn_button_texture",
    reportDimensionsWithScaling: true,
    scaleX: 0.03,
    scaleY: 0.03,
    behaviours: [
        $EndTurnButtonBehaviour { },
        buttonHoverBehaviour,
        $OnHoverChangeTextureBehaviour {
            hoverTexture: "end_turn_button_texture_hover"
        }
    ]
};

var playerLivesLabel = $TemplateLabel {
    name: "player_lives_label",
    font: "vanilla_whale",
    template: "{stat.playerLives}/{game.basePlayerLives}",
    fontScale: 0.09,
    color: color.white,
};

var reservesLabel = $TemplateLabel {
    name: "reserves_label",
    font: "vanilla_whale",
    template: "{game.curReserves}/{game.baseReserves}",
    fontScale: 0.09,
    color: color.white,
};

var destroyCardInstructionActor = $Label {
    name: "destroy_card_instruction_label",
    font: "vanilla_whale",
    text: "Choose a card to destroy!",
    fontScale: 0.2,
    align: "center",
    color: color.black,
};

var drawCardActor = $Box {
    properties: [
        position("absolute"),
        background("transparent_black_texture"),
        flexDirection("column"),
        alignItems("center"),
        relWidth(100.0),
        relHeight(100.0)
    ],
    name: "card_draw_table",
    visible: false,
    zIndex: overlayZIndex,
} children [

    $TemplateLabel {
        properties: [
            relWidth(100.0)
        ],
        font: "red_wing",
        template: "draw {game.remainingCardsToDraw} card{game.remainingCardsToDrawPluralS}",
        fontScale: 0.18,
        align: "center",
        wrap: true,
        color: color.white
    },

    $Box {
        properties: [
            flexDirection("row"),
            justifyContent("space around"),
            relWidth(100.0)
        ],
    } children [

        $Box {
            properties: [
                flexDirection("column")
            ]
        } children [

            $TemplateLabel {
                properties: [
                    margin(0.0, 0.0, 6.0, -6.0)
                ],
                font: "red_wing",
                template: "{game.remainingBullets} bullet{game.remainingBulletsPluralS} remaining in stack",
                wrap: true,
                fontScale: 0.13,
                align: "center",
                color: color.white
            },

            $Image {
                properties: [
                ],
                textureName: "draw_bullet",
                reportDimensionsWithScaling: true,
                scaleX: 0.08,
                scaleY: 0.08,
                behaviours: [ $DrawBulletButtonBehaviour { }, buttonHoverBehaviour ]
            }

        ],

        $Box {
            properties: [
                flexDirection("column"),
            ]
        } children [

            $TemplateLabel {
                properties: [
                    margin(0.0, 0.0, 6.0, -6.0)
                ],
                font: "red_wing",
                template: "{game.remainingCovers} cover{game.remainingCoversPluralS} remaining in stack",
                wrap: true,
                fontScale: 0.13,
                align: "center",
                color: color.white
            },

            $Image {
                properties: [
                ],
                textureName: "draw_cover",
                reportDimensionsWithScaling: true,
                scaleX: 0.08,
                scaleY: 0.08,
                behaviours: [ $DrawCoverCardButtonBehaviour { }, buttonHoverBehaviour ]
            }

        ]

    ]

];

var gameScreen = $Box {
    styles: [
        {
            positionType: positionType.absolute,
            flexDirection: flexDirection.column,
            width: 100.0#percent,
            height: 100.0#percent
        }
    ],
} children [

    $Box {
        styles: [
            {
                flexDirection: flexDirection.row,
                width: 100.0#percent,
                alignItems: align.center
            }
        ],
    } children [
        $Image {
            styles: [
                aspectRatio: 1.0,
                height: 90.0#percent,
            ],
            reportDimensionsWithScaling: true,
            textureName: "heart_texture",
            scaleX: 0.003,
            scaleY: 0.003,
        },
        playerLivesLabel,
        destroyCardInstructionActor
    ],


    $Box {
        styles: [
            {
                flexDirection: flexDirection.row,
                width: 100.0#percent,
                flexGrow: 1.0
            }
        ]
    } children [

        $Revolver {
            styles: [
                {
                    width: 40.0#percent,
                    marginTop: 5.0,
                    marginRight: 10.0
                }
            ],
            ...revolver,
        },

        $Box {
            styles: [
                {
                    flexDirection: flexDirection.column,
                    width: 60.0,
                    marginTop: -5.0,
                }
            ],
        } children [

            $Box {
                styles: [
                // TODO: continue
        ],
                properties: [
                    flexDirection("row"),
                    flexGrow(1.0)
                ],
            } children [

                $CoverArea {
                    properties: [
                        flexGrow(0.5)
                    ],
                    ...coverArea
                },

                $EnemyArea {
                    properties: [
                        flexGrow(0.5)
                    ],
                    ...enemyArea
                }

            ],

            $Box {
                properties: [
                    flexDirection("row"),
                    justifyContent("space between")
                ],
            } children [
                shootButton,
                $Box {
                    properties: [
                        flexDirection("row")
                    ]
                } children [
                    $Image {
                        reportDimensionsWithScaling: true,
                        textureName: "reserves_texture",
                        scaleX: 0.05,
                        scaleY: 0.05
                    },
                    reservesLabel
                ],
                endTurnButton,
            ],

            $CardHand {
                properties: [
                    height(cardHeight),
                    relWidth(100.0)
                ],
                ...cardHand
            }

        ]

    ]

];

root: $Box {
    properties: [
        relWidth(100.0),
        relHeight(100.0)
    ]
} children [
    gameScreen, drawCardActor
]
