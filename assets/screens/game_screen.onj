
import "config/game_config.onj" as gameConfig;
import "config/graphics_config.onj" as graphicsConfig;
import "imports/colors.onj" as color;
import "screens/input_maps.onj" as inputMaps;
import "screens/shared_components.onj" as sharedComponents;

use Common;
use Screen;
use Style;

var pi = 3.141;

var worldWidth = 1600.0;
var worldHeight = 900.0;

var cardScale = 0.22;
var cardHeight = 596.0 * cardScale;

var cardZIndicesStart = 100;
var cardZIndicesEnd = cardZIndicesStart + 100;
var overlayZIndex = 500;

assets: {
    useAssets: [

        "vanilla_whale", "red_wing",

        "title_screen_background", "revolver_slot_texture", "enemy_texture", "end_turn_button_texture",
        "end_turn_button_texture_hover", "shoot_button_texture", "shoot_button_texture_hover", "revolver_drum",
        "heart_texture", "reserves_texture", "hit_overlay", "draw_bullet", "draw_cover", "grey_texture",
        "player_bar", "warning_label_background_red",

        "revolver_cursor",

        "dissolve_shader", "prerendered_noise_perlin_512x512",

        ...(graphicsConfig.keySelectUsedAssets),
        ...(graphicsConfig.gameUsedAssets),
        ...(sharedComponents.navBarUsedAssets),
        ...(sharedComponents.warningLabelUsedAssets)
    ]
},

viewport: $FitViewport {
    worldWidth: worldWidth,
    worldHeight: worldHeight
},

var controller = $GameScreenController {
    cardsFile: "config/cards.onj",
    cardHand: {
        actorName: "card_hand"
    },
    revolver: {
        actorName: "revolver",
        dropBehaviour: $RevolverDropTarget {
          group: "card"
        }
    },
    enemyArea: {
        actorName: "enemy_area",
    },
    cardSelector: {
        actorName: "card_selector"
    },
    cardDragBehaviour: $CardDragSource {
        group: "card"
    },
    cardsToDrawInFirstRound: gameConfig.cardDrawConfig.firstRound,
    cardsToDraw: gameConfig.cardDrawConfig.roundStart,
    maxCards: gameConfig.cardDrawConfig.maxCards,
    playerLives: gameConfig.playerConfig.lives,
    reservesAtRoundBegin: gameConfig.reservesConfig.roundStart,
    shotEmptyDamage: gameConfig.damageConfig.shotEmptyDamage,
};

options: {
    background: "title_screen_background",
    screenController: controller,
    inputMap: [
        ...(inputMaps.gameInputMap),
        ...(inputMaps.defaultInputMap)
    ]
},

templates: [
    sharedComponents.warningLabelTemplate
],

var buttonHoverBehaviour = $MouseHoverBehaviour {
    useSystemCursor: true,
    cursorName: "hand",
    disabled: {
        useSystemCursor: true,
        cursorName: "not allowed"
    }
};

var revolver = $Revolver {
    name: "revolver",
    slotTexture: "revolver_slot_texture",
    font: "vanilla_whale",
    fontColor: color.white,
    fontScale: 2.5,
    slotScale: 0.34,
    cardScale: 0.9,
    animationDuration: 0.2,
    radius: 140.0,
    radiusExtension: 60.0,
    cardZIndex: cardZIndicesStart,
    rotationOff: (pi / 2.0) + (2.0 * pi) / 5.0,
    background: "revolver_drum",
};

var cardHand = $CardHand {
    name: "card_hand",
    cardSize: cardHeight,
    hoveredCardScale: 1.3,
    maxCardSpacing: 100.0,
    startCardZIndicesAt: cardZIndicesStart,
    hoveredCardZIndex: cardZIndicesEnd - 1,
    draggedCardZIndex: cardZIndicesEnd,
    opacityIfNotPlayable: 0.5,
    centerGap: 300.0,
//    centerGap: 19.0,
    targetWidth: worldWidth * 0.6,
};

var enemyArea = $EnemyArea {
    name: "enemy_area",
    enemySelectionDrawable: "key_select_frame"
};

var shootButton = $Image {
    name: "shoot_button_texture",
    textureName: "shoot_button_texture",
    reportDimensionsWithScaling: true,
    scaleX: 0.25,
    scaleY: 0.25,
    behaviours: [
        buttonHoverBehaviour,
        $CatchEventAndEmitBehaviour {
            catch: "ButtonClickEvent",
            emit: "ShootRevolverEvent"
        }
    ]
};

var endTurnButton = $Image {
    name: "end_turn_button",
    textureName: "end_turn_button_texture",
    reportDimensionsWithScaling: true,
    scaleX: 0.25,
    scaleY: 0.25,
    behaviours: [
        buttonHoverBehaviour,
        $CatchEventAndEmitBehaviour {
            catch: "ButtonClickEvent",
            emit: "EndTurnEvent"
        }
    ]
};

var playerLivesLabel = $TemplateLabel {
    name: "player_lives_label",
    font: "vanilla_whale",
    template: "{stat.playerLives}/{game.basePlayerLives}",
    fontScale: 0.9,
    color: color.white,
};

var reservesLabel = $TemplateLabel {
    name: "reserves_label",
    font: "vanilla_whale",
    template: "{game.curReserves}/{game.baseReserves}",
    fontScale: 0.9,
    color: color.white,
};

var disableStyles = [
    {
        style_priority: 1,
        alpha: 1.0,
        disabled: false,
    },
    {
        style_priority: 2,
        style_condition: state("uiFrozen"),
        alpha: 0.5,
        disabled: true
    }
];

var attackPopup = $Box {
    styles: [
        {
            style_priority: 1,
            positionType: positionType.absolute,
            background: "transparent_black_texture",
            flexDirection: flexDirection.column,
            alignItems: align.center,
            justifyContent: justify.center,
            width: 100.0#percent,
            height: 100.0#percent,
            detached: true
        },
        {
            style_priority: 2,
            style_condition: state("showAttackPopup"),
            detached: false
        }
    ]
} children [

    $Label {
        font: "red_wing",
        text: "Parry",
        fontScale: 0.9,
        color: color.white,
        behaviours: [
            $CatchEventAndEmitBehaviour {
                catch: "ButtonClickEvent",
                emit: "ParryEvent"
            }
        ]
    },
    $Label {
        font: "red_wing",
        text: "Dont Parry",
        fontScale: 0.9,
        color: color.white,
        behaviours: [
            $CatchEventAndEmitBehaviour {
                catch: "ButtonClickEvent",
                emit: "PopupConfirmationEvent"
            }
        ]
    },

];

var popupActor = $Box {
    styles: [
        {
            style_priority: 1,
            positionType: positionType.absolute,
            background: "transparent_black_texture",
            flexDirection: flexDirection.column,
            alignItems: align.center,
            justifyContent: justify.center,
            width: 100.0#percent,
            height: 100.0#percent,
            detached: true
        },
        {
            style_priority: 2,
            style_condition: state("showPopup"),
            detached: false
        }
    ],
} children [

    $TemplateLabel {
        font: "red_wing",
        template: "{game.popupText}",
        fontScale: 0.9,
        color: color.white,
    },

    $TemplateLabel {
        styles: [
            {
                style_priority: 1,
                visible: false
            },
            {
                style_priority: 2,
                style_condition: state("showPopupConfirmationButton"),
                visible: true
            }
        ],
        font: "red_wing",
        template: "{game.popupButtonText}",
        fontScale: 0.9,
        color: color.white,
        behaviours: [
            $CatchEventAndEmitBehaviour {
                catch: "ButtonClickEvent",
                emit: "PopupConfirmationEvent"
            }
        ]
    },

    $Box {
        styles: [
            {
                style_priority: 1,
                detached: true,
            },
            {
                style_priority: 2,
                style_condition: state("showPopupCardSelector"),
                detached: false
            }
        ],
    } children [
        $CircularCardSelector {
            styles: [
                {
                    width: 50#points,
                    height: 50#points,
                }
            ],
            name: "card_selector",
            emptySlotTexture: "grey_texture",
            disabledAlpha: 0.6,
            radius: 200.0,
            size: 3570.0 * 0.04
        }
    ],

];

var drawCardActor = $Box {
    styles: [
        {
            style_priority: 1,
            positionType: positionType.absolute,
            background: "transparent_black_texture",
            flexDirection: flexDirection.column,
            alignItems: align.center,
            width: 100.0#percent,
            height: 100.0#percent,
            detached: true
        },
        {
            style_priority: 2,
            style_condition: state("showCardDrawActor"),
            detached: false
        }
    ],
    zIndex: overlayZIndex,
} children [

    $TemplateLabel {
        styles: [
            {
                width: 100.0#percent
            }
        ],
        font: "red_wing",
        template: "draw {game.remainingCardsToDraw} card{game.remainingCardsToDrawPluralS}",
        fontScale: 1.8,
        align: "center",
        wrap: true,
        color: color.white
    },

    $Box {
        styles: [
            {
                flexDirection: flexDirection.row,
                justifyContent: justify.spaceAround,
                width: 100.0#percent
            }
        ],
    } children [

        $Box {
            styles: [
                {
                    flexDirection: flexDirection.column
                }
            ]
        } children [

            $TemplateLabel {
                styles: [
                    {
                        marginTop: 6.0#points,
                        marginBottom: -6.0#points
                    }
                ],
                font: "red_wing",
                template: "{game.cardsInStack} card{game.cardsInStackPluralS} remaining in stack",
                wrap: true,
                fontScale: 1.3,
                align: "center",
                color: color.white
            },

            $Image {
                textureName: "draw_bullet",
                reportDimensionsWithScaling: true,
                scaleX: 0.8,
                scaleY: 0.8,
                behaviours: [
                    $CatchEventAndEmitBehaviour {
                        catch: "ButtonClickEvent",
                        emit: "DrawCardEvent"
                    }
                ]
            }

        ],

    ]

];
// TODO: fix pixelated looking textures
var playerBar = $Box {
    styles: [
        {
            width: 100#percent,
            height: 220#points,
            background: "player_bar",
            flexDirection: flexDirection.row,
            alignItems: align.center
        }
    ]
} children [

    $Box {
        styles: [
            {
                flexDirection: flexDirection.row,
                alignItems: align.center,
                justifyContent: justify.center,
                height: 40#points,
                width: 90#points,
                rotation: 6.0,
                positionBottom: -6.0#points,
                positionLeft: 20.0#points
            }
        ],
        enableTransform: true,
    } children [
        $Image {
            styles: [
                {
                    aspectRatio: 1.0,
                    width: 40.0#points
                }
            ],
            reportDimensionsWithScaling: true,
            textureName: "reserves_texture",
            scaleX: 0.02,
            scaleY: 0.02
        },
        reservesLabel,
    ],

    $Box {
        styles: [
            {
                positionLeft: 320#points,
                positionBottom: 30#points,
                rotation: 4.0
            }
        ],
        enableTransform: true
    } children [
        shootButton
    ],

    $Box {
        styles: [
            {
                width: 150#points,
                height: 80#points,
                positionLeft: 800#points,
                positionBottom: 30#points,
                rotation: -4.0
            }
        ],
        enableTransform: true,
    },

    $Box {
        styles: [
            {
                positionLeft: 1070#points,
                positionBottom: 20#points,
                rotation: -6.0,
            }
        ],
        enableTransform: true,
    } children [
        endTurnButton
    ]
];

var gameScreen = $Box {
    styles: [
        {
            positionType: positionType.absolute,
            flexDirection: flexDirection.column,
            width: 100.0#percent,
            height: 100.0#percent,
            alignItems: align.center,
            justifyContent: justify.flexEnd,
        }
    ],
} children [

    $Box {
        styles: [
            {
                flexGrow: 1.0
            }
        ]
    },

    $EnemyArea {
        styles: [
            {
                width: 100#points,
                height: 100#points,
                positionLeft: 500#points,
                positionBottom: -100#points,
            }
        ],
        ...enemyArea
    },

    $CardHand {
        styles: [
            {
                width: 100#percent,
                height: 0#points,
                positionBottom: -680#points,
            }
        ],
        zIndex: 200,
        ...cardHand
    },

    $Revolver {
        styles: [
            {
                positionBottom: -250#points
            }
        ],
        zIndex: 100,
        ...revolver
    },

    playerBar

];

root: $Box {
    styles: [
        {
            width: 100.0#percent,
            height: 100.0#percent,
            flexDirection: flexDirection.column
        }
    ]
} children [

    $Statusbar {
        options: [
        ],
        ...(sharedComponents.statusbarLeftDefaults)
    },
//
//    $FromTemplate {
//        generateFrom: "warning_label_template",
//        data: {
//            symbol: "!!!",
//            title: "Hard maximum handsize reached",
//            body: "You can't draw any more cards this turn. After this turn, put all but 12 Cards at the bottom of your deck.",
//            background: "warning_label_background_red",
//            width: 8#percent,
//        }
//    },

    gameScreen,
    drawCardActor,
    popupActor,
    attackPopup
]
