import "imports/font_group.onjschema" as _;
import "imports/game_screen_controller_keys.onjschema" as gameScreenControllerKeys;

use Common;

var viewportSharedKeys = {
    backgroundTexture?: string
};

$Viewport {

    $FitViewport {
        worldWidth: float,
        worldHeight: float,
        ...viewportSharedKeys
    }

    $ExtendViewport {
        minWidth: float,
        minHeight: float,
        ...viewportSharedKeys
    }

}

var tableCell = {
    width?: float,
    height?: float,
    colspan?: int,
    align?: string,
    padTop?: float,
    padBottom?: float,
    padLeft?: float,
    padRight?: float,
    cellName?: string,
    sizeToActor?: boolean,
    expandX?: boolean,
    expandY?: boolean,
    element: $Widget
};

var tableRow = {
    width?: float,
    height?: float,
    cells: tableCell[]
};

var widgetSharedKeys = {
    debug?: boolean,
    behaviours?: $Behaviour[],
    width?: float,
    height?: float,
    dragAndDrop?: $DragAndDropBehaviour,
    zIndex?: int,
    x?: float,
    y?: float,
    visible?: boolean,
    name?: string
};

var detailTextSharedKeys = {
    detailFont: string,
    detailFontColor: Color,
    detailBackgroundTexture: string,
    detailFontScale: float,
    detailOffsetX: float,
    detailOffsetY: float,
    detailWidth: float,
};

$Widget {

    $Label {
        text: string,
        font: string,
        color: Color,
        fontScale: float,
        backgroundTexture?: string,
        align?: string,
        ...widgetSharedKeys
    }

    $TemplateLabel {
        template: string,
        font: string,
        color: Color,
        fontScale: float,
        backgroundTexture?: string,
        align?: string,
        ...widgetSharedKeys
    }

    $Image {
        textureName: string,
        scaleX: float,
        scaleY: float,
        reportDimensionsWithScaling?: boolean,
        scalingWorkaround?: boolean,
        ...widgetSharedKeys
    }

    $AnimatedImage {
        animationName: string,
        scaleX: float,
        scaleY: float,
        ...widgetSharedKeys
    }

    $Table {
        fillX?: boolean,
        fillY?: boolean,
        align?: string,
        rows: tableRow[],
        applyZIndices?: boolean,
        backgroundTexture?: string,
        ...widgetSharedKeys
    }

    $HorizontalGroup {
        children: $Widget[],
        align: string,
        spacing?: float,
        expand?: boolean,
        wrap?: boolean,
        ...widgetSharedKeys
    }

    $VerticalGroup {
        children: $Widget[],
        align: string,
        spacing?: float,
        expand?: boolean,
        wrap?: boolean,
        ...widgetSharedKeys
    }

    $RotatableImageActor {
        textureName: string,
        slowdownRate: float,
        velocityMultiplier: float,
        startVelocity?: float,
        snap: {
            rotations: float[],
            deactivateAt: float,
            strengthMultiplier: float,
            deactivateWhileDragging: boolean,
        }?,
        ...widgetSharedKeys
    }

    $VBox {
        fillX?: boolean,
        fillY?: boolean,
        children: $Widget[],
        ...widgetSharedKeys
    }

    $HBox {
        fillX?: boolean,
        fillY?: boolean,
        children: $Widget[],
        ...widgetSharedKeys
    }

    $CardHand {
        cardScale: float,
        cardSpacing: float,
        startCardZIndicesAt: int,
        hoveredCardZIndex: int,
        draggedCardZIndex: int,
        hoveredCardScale: float,
        targetWidth: float,
        ...detailTextSharedKeys,
        ...widgetSharedKeys
    }

    $Revolver {
        slotTexture: string,
        font: string,
        fontColor: Color,
        fontScale: float,
        slotScale: float,
        cardScale: float,
        animationDuration: float,
        radius: float,
        rotationOff: float,
        cardZIndex: int,
        background?: string,
        radiusExtension: float,
        ...detailTextSharedKeys,
        ...widgetSharedKeys
    }

    $EnemyArea {
        ...widgetSharedKeys
    }

    $CoverArea {
        numStacks: int,
        maxCards: int,
        infoFont: string,
        infoFontColor: Color,
        infoFontScale: float,
        stackBackgroundTexture: string,
        stackSpacing: float,
        areaSpacing: float,
        cardScale: float,
        stackMinSize: float,
        onlyAllowAddingOnTheSameTurn: boolean,
        ...detailTextSharedKeys,
        ...widgetSharedKeys
    }

}

$Behaviour {

    $MouseHoverBehaviour {
        useSystemCursor: boolean,
        cursorName: string,
        disabled: {
            useSystemCursor: boolean,
            cursorName: string
        }?
    }

    $OnClickExitBehaviour { }

    $OnHoverChangeSizeBehaviour {
        cellName?: string,
        enterDuration: float,
        exitDuration: float,
        baseX: float,
        baseY: float,
        targetX: float,
        targetY: float,
        enterInterpolation: string?,
        exitInterpolation: string?
    }

    $OnHoverChangeFontSizeBehaviour {
        enterDuration: float,
        exitDuration: float,
        targetFontScale: float,
        baseFontScale: float,
        enterInterpolation: string?,
        exitInterpolation: string?
    }

    $OnClickChangeScreenBehaviour {
        screenPath: string
    }

    $OnClickAbandonRunBehaviour { }

    $OnClickRemoveActorBehaviour { }

    $OnClickMaskBehaviour {
        maskTexture: string,
        invert?: boolean,
        maskScaleX?: float,
        maskScaleY?: float,
        maskOffsetX?: float,
        maskOffsetY?: float,
    }

    $OnClickParticleEffectBehaviour {
        file: string,
        textureDir: string,
        effectScale?: float,
        useCursorPos?: boolean,
    }

    $OnClickChangePostProcessorBehaviour {
        postProcessor: string?,
        duration: int?,
        setOnlyIfNoPostProcessorIsSet: boolean,
    }

    $OnHoverPopupBehaviour {
        popupName: string,
        setPopupPosition: boolean,
        xOffset?: float,
        yOffset?: float,
    }

    $OnHoverChangeTextureBehaviour {
        hoverTexture: string
    }

    $ShootButtonBehaviour { }

    $EndTurnButtonBehaviour { }

    $DrawBulletButtonBehaviour { }

    $DrawCoverCardButtonBehaviour { }

    $OnClickResetSavefileBehaviour { }

}

$ScreenController {

    $GameScreenController {
        ...gameScreenControllerKeys
    }

    $IntroScreenController {
        cardAtlasFile: string,
        appearActor: string,
        nextScreen: string,
    }

    $CardSelectionScreenController {
        cardSelectionActorName: string,
        cardConfigFile: string,
        cardAtlasFile: string,
        cardsToSelect: int,
        cardScale: float,
        cardBehaviour: $Behaviour,
        nextScreen: string,
        ...detailTextSharedKeys,
        emptyFont: string,
        emptyFontColor: Color,
        emptyFontScale: float,
        emptyText: string,
    }

}

viewport: $Viewport,

assets: {
    textures: {
        name: string,
        file: string
    }[],
    fonts: $Font[],
    textureAtlases: {
        file: string,
        defines: string[]
    }[],
    cursors: {
        name: string,
        file: string,
        hotspotX: int,
        hotspotY: int,
    }[],
    postProcessors: {
        name: string,
        vertexShader: string,
        fragmentShader: string,
        timeOffset?: int,
        uniforms: string[],
        args: {
            ...*
        }?
    }[],
    animations: {
        name: string,
        atlasFile: string,
        frames?: string[],
        initialFrame: int,
        frameTime: int,
    }[],
    colorTextures: {
        name: string,
        color: Color,
    }[],
    particles: {
        name: string,
        particlePath: string,
        textureDir: string,
        scale: float,
    }[]
},

options: {
    setFillParentOnRoot: boolean,
    defaultCursor: {
        useSystemCursor: boolean,
        cursorName: string
    },
    postProcessor: string?,
    controller: $ScreenController?,
    printFrameRate?: boolean
},

children: $Widget[],
unmanagedChildren?: $Widget[]
