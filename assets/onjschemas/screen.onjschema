import "imports/font_group.onjschema" as _;
import "imports/game_screen_controller_keys.onjschema" as gameScreenControllerKeys;

use Common;
use Style;

$Viewport {

    $FitViewport {
        worldWidth: float,
        worldHeight: float
    }

    $ExtendViewport {
        minWidth: float,
        minHeight: float
    }

}

var widgetSharedKeys = {
    debug?: boolean,
    behaviours?: $Behaviour[],
    width?: float,
    height?: float,
    zIndex?: int,
    visible?: boolean,
    name?: string,
    touchable?: string,
    styles?: { ...* }[],
    dragAndDrop?: $DragAndDropBehaviour,
};

//var detailTextSharedKeys = {
//    detailFont: string,
//    detailFontColor: Color,
//    detailFontScale: float,
//    detailBackgroundTexture: string,
//    detailOffsetX: float,
//    detailOffsetY: float,
//    detailWidth: float,
//};

$Widget {

    $Backpack{
        ...widgetSharedKeys,
    }

    $Statusbar{
        mapIndicatorWidgetName?: string,
        optionsWidgetName: string,
        options: {
            actorName: string,
            displayName: string,
        }[],
        partOfSelectionHierarchy?: boolean,
        children?: $Widget[],
         ...widgetSharedKeys,
    }

    $Box {
        children?: $Widget[],
        partOfSelectionHierarchy?: boolean,
        ...widgetSharedKeys
    }

    $ScrollBox {
        children?: $Widget[],
        partOfSelectionHierarchy?: boolean,
        isScrollDirectionVertical: boolean,
        scrollDistance: float,
        backgroundStretched: boolean,
        scrollbarBackgroundName?: string,
        scrollbarName?: string,
        scrollbarSide?: string,
        ...widgetSharedKeys
    }

    $Label {
        text: string,
        font: string,
        color: Color?,
        fontScale?: float,
        backgroundTexture?: string,
        align?: string,
        wrap?: boolean,
        partOfSelectionHierarchy?: boolean,
        ...widgetSharedKeys
    }

    $TemplateLabel {
        template: string,
        font: string,
        color: Color,
        fontScale: float,
        backgroundTexture?: string,
        align?: string,
        wrap?: boolean,
        partOfSelectionHierarchy?: boolean,
        ...widgetSharedKeys
    }

    $Image {
        textureName?: string,
        scaleX: float,
        scaleY: float,
        reportDimensionsWithScaling?: boolean,
        ...widgetSharedKeys
    }

    $AnimatedImage {
        animationName: string,
        scaleX: float,
        scaleY: float,
        partOfSelectionHierarchy?: boolean,
        ...widgetSharedKeys
    }

    $CardHand {
        cardSize: float,
        cardSpacing: float,
        startCardZIndicesAt: int,
        hoveredCardZIndex: int,
        draggedCardZIndex: int,
        hoveredCardScale: float,
        targetWidth: float,
        opacityIfNotPlayable: float,
//        ...detailTextSharedKeys,
        ...widgetSharedKeys
    }

    $Revolver {
        slotTexture: string,
        font: string,
        fontColor: Color,
        fontScale: float,
        slotScale: float,
        cardScale: float,
        animationDuration: float,
        radius: float,
        rotationOff: float,
        cardZIndex: int,
        background: string,
        radiusExtension: float,
//        ...detailTextSharedKeys,
        ...widgetSharedKeys
    }

    $EnemyArea {
        enemySelectionDrawable: string,
        ...widgetSharedKeys
    }

    $Map {
        detailMapProvider: $DetailMapProvider,
        defaultNodeTexture: string,
        background: string,
        playerTexture: string,
        playerWidth: float,
        playerHeight: float,
        nodeSize: float,
        lineWidth: float,
        edgeTexture: string,
        playerMovementTime: float,
        directionIndicator: string,
        startButtonName: string,
        screenSpeed: float,
        backgroundScale: float,
        leftScreenSideDeadSection: float,
        disabledDirectionIndicatorAlpha: float,
        ...widgetSharedKeys
    }

    $MapEventDetail {
        font: string,
        fontColor: Color,
        background: string,
        ...widgetSharedKeys
    }

    $AdvancedText {
        font: string,
        parts: $AdvancedTextPart[],
        defaults: {
            font: string,
            fontScale: float,
            color: Color
        },
        ...widgetSharedKeys
    }

    $DialogWidget {
        progressTime: float,
        advanceArrowDrawable: string,
        advanceArrowOffset: float,
        optionsBox: string,
        optionsFont: string,
        optionsFontColor: Color,
        optionsFontScale: float,
        ...widgetSharedKeys
    }

    $WorldView {
        ...widgetSharedKeys
    }

    $CircularCardSelector {
        radius: float,
        size: float,
        emptySlotTexture: string,
        disabledAlpha: float,
        ...widgetSharedKeys
    }

    $PersonWidget{
        offsetX:float,
        offsetY:float,
        scale:float,
        dropBehaviour?: $DragAndDropBehaviour,
        ...widgetSharedKeys
    }

}

var advancedTextPartSharedKeys = {
    actions?: $AdvancedTextPartAction[]
};

$AdvancedTextPart {

    $Text {
        text: string,
        font?: string,
        color?: Color,
        fontScale?: float,
        ...advancedTextPartSharedKeys
    }

    $Icon {
        icon: string,
        ...advancedTextPartSharedKeys
    }

}

$AdvancedTextPartAction {

    $ShakeTextAction {
        xMagnitude: float,
        xSpeed: float,
        yMagnitude: float,
        ySpeed: float,
    }

}

$DetailMapProvider {

    $FromFileDetailMapProvider {
        file: string
    }

    $FromSeededGeneratorDetailMapProvider {
        seed: int,
        startArea: string,
        endArea: string,
        otherAreas: string[],
    }

    $CurrentMapProvider { }

}

$Behaviour {

    $OnClickChangeScreenStateBehaviour {
        state: string,
        enter: boolean
    }

    $MouseHoverBehaviour {
        useSystemCursor: boolean,
        cursorName: string,
        disabled: {
            useSystemCursor: boolean,
            cursorName: string
        }?
    }

    $OnClickExitBehaviour { }

    $OnClickChangeScreenBehaviour {
        screenPath: string
    }

    $OnClickAbandonRunBehaviour { }


    $OnClickResetSavefileBehaviour { }

    $CatchEventAndEmitBehaviour {
        catch: string,
        emit: string,
        blockCaughtEvent?: boolean
    }

}

$ScreenController {

    $GameScreenController {
        ...gameScreenControllerKeys
    }

    $IntroScreenController {
        appearActor: string,
        nextScreen: string,
    }

    $CardSelectionScreenController {
        cardSelectionActorName: string,
        cardConfigFile: string,
        cardsToSelect: int,
        cardScale: float,
        cardBehaviour: $Behaviour,
        nextScreen: string,
//        ...detailTextSharedKeys,
        emptyFont: string,
        emptyFontColor: Color,
        emptyFontScale: float,
        emptyText: string,
    }

    $DialogScreenController {
        npcsFile: string,
        dialogWidgetName: string
    }

    $ShopScreenController {
        shopsFile: string,
        npcsFile: string,
        cardsFile: string,
        personWidgetName: string,
        messageWidgetName: string,
        cardsParentName: string,
    }
}

$KeyAction {

    $ToggleFullscreenKeyAction {
        width: int,
        height: int
    }

    $SelectCardInHandKeyAction {
        num: int
    }

    $SelectRevolverSlotKeyAction {
        num: int
    }

    $SelectAdjacentKeyAction {
        direction: string
    }

    $PlaceSelectedCardInRevolverKeyAction {
        revolverSlot: int
    }

    $DeselectAllKeyAction { }

    $NextInHierarchyKeyAction { }

    $PreviousInHierarchyKeyAction { }

    $FireClickEventKeyAction { }

    $MoveInDetailMapKeyAction {
        mapActor: string,
        direction: string
    }

    $EnterEventDetailMapKeyAction {
        mapActor: string
    }
}

viewport: $Viewport,

assets: {
    useAssets: string[]
},

options: {
    background?: string,
    screenController?: $ScreenController,
    inputMap?: {
        keycode: int,
        modifiers: int[],
        action: $KeyAction
    }[],
    postProcessor?: string,
    transitionAwayTime?: float
//    printFrameRate?: boolean
},

root: $Widget,

templates?: $Widget[],
