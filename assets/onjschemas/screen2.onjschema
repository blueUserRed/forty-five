import "imports/font_group.onjschema" as _;
import "imports/game_screen_controller_keys.onjschema" as gameScreenControllerKeys;

use Common;
use Style;

$Viewport {

    $FitViewport {
        worldWidth: float,
        worldHeight: float
    }

    $ExtendViewport {
        minWidth: float,
        minHeight: float
    }

}

var widgetSharedKeys = {
    debug?: boolean,
    behaviours?: $Behaviour[],
    width?: float,
    height?: float,
    zIndex?: int,
    visible?: boolean,
    name?: string,
    styles?: string[],
    properties?: StyleProperty[]
};

//var detailTextSharedKeys = {
//    detailFont: string,
//    detailFontColor: Color,
//    detailFontScale: float,
//    detailBackgroundTexture: string,
//    detailOffsetX: float,
//    detailOffsetY: float,
//    detailWidth: float,
//};

$Widget {

    $Box {
        children?: $Widget[],
        partOfSelectionHierarchy?: boolean,
        ...widgetSharedKeys
    }

    $Label {
        text: string,
        font: string,
        color: Color?,
        fontScale?: float,
        backgroundTexture?: string,
        align?: string,
        wrap?: boolean,
        partOfSelectionHierarchy?: boolean,
        ...widgetSharedKeys
    }

    $TemplateLabel {
        template: string,
        font: string,
        color: Color,
        fontScale: float,
        backgroundTexture?: string,
        align?: string,
        wrap?: boolean,
        partOfSelectionHierarchy?: boolean,
        ...widgetSharedKeys
    }

    $Image {
        textureName: string,
        scaleX: float,
        scaleY: float,
        reportDimensionsWithScaling?: boolean,
        ...widgetSharedKeys
    }

    $AnimatedImage {
        animationName: string,
        scaleX: float,
        scaleY: float,
        partOfSelectionHierarchy?: boolean,
        ...widgetSharedKeys
    }

    $CardHand {
        cardScale: float,
        cardSpacing: float,
        startCardZIndicesAt: int,
        hoveredCardZIndex: int,
        draggedCardZIndex: int,
        hoveredCardScale: float,
        targetWidth: float,
//        ...detailTextSharedKeys,
        ...widgetSharedKeys
    }

    $Revolver {
        slotTexture: string,
        font: string,
        fontColor: Color,
        fontScale: float,
        slotScale: float,
        cardScale: float,
        animationDuration: float,
        radius: float,
        rotationOff: float,
        cardZIndex: int,
        background?: string,
        radiusExtension: float,
//        ...detailTextSharedKeys,
        ...widgetSharedKeys
    }

    $EnemyArea {
        enemySelectionDrawable: string,
        ...widgetSharedKeys
    }

    $CoverArea {
        numStacks: int,
        maxCards: int,
        infoFont: string,
        infoFontColor: Color,
        infoFontScale: float,
//        stackBackgroundTexture: string,
        areaSpacing: float,
        cardScale: float,
        onlyAllowAddingOnTheSameTurn: boolean,
        detailFont: string,
        detailFontColor: Color,
        detailFontScale: float,
        cardDeltaX: float,
        cardDeltaY: float,
        cardInitialX: float,
        cardInitialY: float,
        stackHeight: float,
        stackMinWidth: float,
        stackHook: string,
        ...widgetSharedKeys
    }

    $Map {
        detailMapProvider: $DetailMapProvider,
        nodeTexture: string,
        background: string,
        playerTexture: string,
        playerWidth: float,
        playerHeight: float,
        nodeSize: float,
        lineWidth: float,
        edgeTexture: string,
        playerMovementTime: float,
        detailFont: string,
        detailFontColor: Color,
        detailBackground: string,
        directionIndicator: string,
        ...widgetSharedKeys
    }

}

$DetailMapProvider {

    $FromFileDetailMapProvider {
        file: string
    }

    $FromSeededGeneratorDetailMapProvider {
        seed: int
    }

}

$Behaviour {

    $MouseHoverBehaviour {
        useSystemCursor: boolean,
        cursorName: string,
        disabled: {
            useSystemCursor: boolean,
            cursorName: string
        }?
    }

    $OnClickExitBehaviour { }

    $OnHoverChangeSizeBehaviour {
        cellName?: string,
        enterDuration: float,
        exitDuration: float,
        baseX: float,
        baseY: float,
        targetX: float,
        targetY: float,
        enterInterpolation: string?,
        exitInterpolation: string?
    }

    $OnHoverChangeFontSizeBehaviour {
        enterDuration: float,
        exitDuration: float,
        targetFontScale: float,
        baseFontScale: float,
        enterInterpolation: string?,
        exitInterpolation: string?
    }

    $OnClickChangeScreenBehaviour {
        screenPath: string
    }

    $OnClickAbandonRunBehaviour { }

    $OnClickRemoveActorBehaviour { }

    $OnClickMaskBehaviour {
        maskTexture: string,
        invert?: boolean,
        maskScaleX?: float,
        maskScaleY?: float,
        maskOffsetX?: float,
        maskOffsetY?: float,
    }

    $OnClickParticleEffectBehaviour {
        file: string,
        textureDir: string,
        effectScale?: float,
        useCursorPos?: boolean,
    }

    $OnClickChangePostProcessorBehaviour {
        postProcessor: string?,
        duration: int?,
        setOnlyIfNoPostProcessorIsSet: boolean,
    }

    $OnHoverPopupBehaviour {
        popupName: string,
        setPopupPosition: boolean,
        xOffset?: float,
        yOffset?: float,
    }

    $OnHoverChangeTextureBehaviour {
        hoverTexture: string
    }

    $ShootButtonBehaviour { }

    $EndTurnButtonBehaviour { }

    $DrawBulletButtonBehaviour { }

    $DrawCoverCardButtonBehaviour { }

    $OnClickResetSavefileBehaviour { }

}

$ScreenController {

    $GameScreenController {
        ...gameScreenControllerKeys
    }

    $IntroScreenController {
        appearActor: string,
        nextScreen: string,
    }

    $CardSelectionScreenController {
        cardSelectionActorName: string,
        cardConfigFile: string,
        cardsToSelect: int,
        cardScale: float,
        cardBehaviour: $Behaviour,
        nextScreen: string,
//        ...detailTextSharedKeys,
        emptyFont: string,
        emptyFontColor: Color,
        emptyFontScale: float,
        emptyText: string,
    }

}

$KeyAction {

    $ToggleFullscreenKeyAction {
        width: int,
        height: int
    }

    $SelectCardInHandKeyAction {
        num: int
    }

    $SelectRevolverSlotKeyAction {
        num: int
    }

    $SelectAdjacentKeyAction {
        direction: string
    }

    $PlaceSelectedCardInRevolverKeyAction {
        revolverSlot: int
    }

    $DeselectAllKeyAction { }

    $ShootKeyAction { }

    $EndTurnKeyAction { }

    $DrawBulletKeyAction { }

    $DrawCoverKeyAction { }

    $NextInHierarchyKeyAction { }

    $PreviousInHierarchyKeyAction { }

    $FireClickEventKeyAction { }

}

viewport: $Viewport,

assets: {
    useCardAtlas?: boolean,
    useAssets: string[],
    styleFiles?: string[],
    styles?: {
        name: string,
        properties: StyleProperty[]
    }[]
},

options: {
    background?: string,
    screenController?: $ScreenController,
    inputMap?: {
        keycode: int,
        modifiers: int[],
        action: $KeyAction
    }[],
//    setFillParentOnRoot: boolean,
//    defaultCursor: {
//        useSystemCursor: boolean,
//        cursorName: string
//    },
    postProcessor?: string,
//    printFrameRate?: boolean
},

root: $Widget
