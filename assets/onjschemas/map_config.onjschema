

var mapEventStandardConfig = {
    currentlyBlocks: boolean,
    canBeStarted: boolean,
    isCompleted: boolean
};

var distributionFunctionStandardConfig = {
    decoration: string,
    density: float,
    baseWidth: float,
    baseHeight: float,
    scaleMin: float,
    scaleMax: float,
    onlyCollidesWithNodes: boolean,
    canOverlapWithOtherNodes: boolean
};

$MapEvent {

    $EmptyMapEvent { }

    $EncounterMapEvent {
        ...mapEventStandardConfig
    }

    $EnterMapMapEvent {
        targetMap: string,
    }

    $NPCMapEvent {
        npc: string,
        ...mapEventStandardConfig
    }

    $ShopMapEvent {
        type: string,
        person: string,
        seed: int?,
        boughtIndices: int[],
    }

    $ChooseCardMapEvent {
        types: string[],
        seed: int?,
        ...mapEventStandardConfig
    }
}


$DecorationDistributionFunction {

    $RandomDistributionFunction {
        ...distributionFunctionStandardConfig,
    }

    $SingleClusterDistributionFunction{
        ...distributionFunctionStandardConfig,
        minCenterX?: Float,
        maxCenterX?: Float,
        minCenterY?: Float,
        maxCenterY?: Float,
        innerRadius: Float,
        outerRadius: Float,
        nbrOfInnerPoints: Int,
        nbrOfOuterPoints: Int,
    }

    $MultiClusterDistributionFunction {
        ...distributionFunctionStandardConfig,
        blockSize: float,
        prob: float,
        additionalProbIfNeighbor: float,
    }
}

var mapRestrictions = {
    maxNodes: int,
    minNodes: int,
    maxSplits: int,
    splitProbability: float,
    decorationPadding: float,
    startArea: string,
    endArea: string,
    rotation: float,
    scaleLength?: float,
    scaleWidth?: float,
    otherAreas?: string[],
    fixedEvents: {
        isDeadEnd: boolean,
        nodeTexture: string?,
        event: $MapEvent
    }[],
    optionalEvents: {
        weight: int,
        nodeTexture: string?,
        event: $MapEvent
    }[],
    finalEvent?: {
        nodeTexture: string?,
        event: $MapEvent
    },
    decorationSeed: int,
    decorations: $DecorationDistributionFunction[],
    exitNodeTexture: string,
    encounterModifiers: {
        name: string,
        weight: int,
    }[],
    avgNbrOfEncounters: int,
};

screens: {
    mapScreen: string,
    dialogScreen: string,
    encounterScreen: string,
    shopScreen: string,
    chooseCardScreen: string,
},

mapImages: {
    name: string,
    image: string,
    width: float,
    height: float,
    type: string,
}[],

displayNames: {
    name: string,
    display: string
}[],

generatorConfig: {
    outputDirectory: string,
    maps: {
        name: string,
        seed: int,
        biome: string,
        restrictions: mapRestrictions
    }[]
},

worldView: {
    backgroundHandle: string,
    locationIndicatorHandle: string,
    locationIndicatorWidth: float,
    locationIndicatorHeight: float,
    locations: {
        name: string,
        x: int,
        y: int,
        image?: string,
        width?: int,
        height?: int
    }[]
}

