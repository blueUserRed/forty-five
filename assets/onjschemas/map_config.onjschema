import "imports/map_events.onjschema" as _;

use Common;

$DecorationDistribution {

    $Random {}

    $FadeX {
        start: float,
        end: float,
        interpolation: Interpolation,
    }

}

var decoration = {
    distribution: $DecorationDistribution,
    decoration: string,
    baseWidth: float,
    baseHeight: float,
    density: float,
    checkNodeCollisions: boolean,
    checkLineCollisions: boolean,
    checkDecorationCollisions: boolean,
    generateDecorationCollisions: boolean,
    onlyCheckCollisionsAtSpawnPoints: boolean,
    scale: float[2],
    shrinkBoundsWidth?: float,
    shrinkBoundsHeight?: float,
    sortByY: boolean,
    animated: boolean,
};

$MapGenerator {

    $ThreeLine {
        name: string,
        seed: int,
        progress: float[2],
        biome: string,
        startArea: string,
        endArea: string,
        roadLength: float,
        exitNodeTexture: string,
        mainLineNodes: int,
        altLinesPadding: int[2],
        altLinesOffset: float,
        varianceX: float,
        varianceY: float,
        horizontalExtension: float,
        verticalExtension: float,
        locationSignProtectedAreaWidth: float,
        locationSignProtectedAreaHeight: float,
        mainEvent: {
            nodeTexture: string,
            event: $MapEvent,
        },
        events: {
            nodeTexture: string,
            event: $MapEvent,
            offset: int[2],
            line: int,
        }[],
        nodeProtectedArea: float,
        decorations: decoration[]
    }

    $Radial {
        name: string,
        seed: int,
        biome: string,
        nodeProtectedArea: float,
        decorations: decoration[],
        circles: {
            radius: float,
            numNodes: int,
            angleVariance: float,
        }[],
        horizontalExtension: float,
        verticalExtension: float,
        events: {
            event: $MapEvent,
            nodeTexture: string,
            circle?: int?,
            weight: int,
            fixedAmount?: int?,
        }[]
    }

}

generatorConfig: {
    outputDirectory: string,
    maps: $MapGenerator[]
},

screens: {
    mapScreen: string,
    dialogScreen: string,
    encounterScreen: string,
    shopScreen: string,
    chooseCardScreen: string,
    changeToHealOrMaxHPScreen: string,
    changeToAddMaxHPScreen: string,
    titleScreen: string,
    creditsScreen: string,
},

paths: {
    roads: string,
    areas: string,
    areaDefinitions: string,
    staticRoadDefinitions: string,
    mapScreen: string,
},

mapImages: {
    name: string,
    image: string,
    width: float,
    height: float,
    type: string,
}[],

displayNames: {
    name: string,
    display: string
}[],

worldView: {
    backgroundHandle: string,
    locationIndicatorHandle: string,
    locationIndicatorWidth: float,
    locationIndicatorHeight: float,
    locations: {
        name: string,
        x: int,
        y: int,
        image?: string,
        width?: int,
        height?: int
    }[]
}

