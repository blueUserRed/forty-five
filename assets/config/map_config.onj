use Map;
use Common;

var mapSharedConfig = {
    mainLineNodes: 8,
    altLinesPadding: [0, 2],
    varianceX: 15.0,
    varianceY: 15.0,
    roadLength: 270.0,
    exitNodeTexture: "map_node_exit",
    horizontalExtension: 80.0,
    verticalExtension: 50.0,
    locationSignProtectedAreaWidth: 25.0,
    locationSignProtectedAreaHeight: 30.0,
    mainEvent: {
        nodeTexture: "map_node_fight",
        event: $EncounterMapEvent {
            currentlyBlocks: true,
            canBeStarted: true,
            isCompleted: false,
            encounterIndex: 0,
            distanceToEnd: -1,
        },
    },
    events: [
        {
            nodeTexture: "map_node_heal",
            offset: [2, 3],
            line: 1,
            event: $HealOrMaxHPEvent {
                seed: null,
                healRange: [8, 14],
                maxHPRange: [0, 0],
                currentlyBlocks: false,
                canBeStarted: true,
                isCompleted: false,
            }
        },
        {
            nodeTexture: "map_node_heal",
            offset: [3, 4],
            line: 0,
            event: $HealOrMaxHPEvent {
                seed: null,
                healRange: [8, 14],
                maxHPRange: [0, 0],
                currentlyBlocks: false,
                canBeStarted: true,
                isCompleted: false,
            }
        },
        {
            nodeTexture: "map_node_choose_card",
            offset: [2, 2],
            line: 2,
            event: $ChooseCardMapEvent {
                types: [],
                seed: null,
                nbrOfCards: 3,
                amountOfRerolls: 0,
                rerollPriceIncrease: 30,
                rerollBasePrice: 30,
                enableRerolls: true,
                currentlyBlocks: false,
                canBeStarted: true,
                isCompleted: false,
            }
        },
        {
            nodeTexture: "map_node_shop",
            offset: [4, 4],
            line: 0,
            event: $ShopMapEvent {
                seed: null,
                selectedCards: [],
                amountCards: [3, 5],
                amountOfRerolls: 0,
                rerollPriceIncrease: 30,
                rerollBasePrice: 30,
                boughtIndices: [
                ],
                types: [
                ],
                person: "traveling_merchant",
            }
        }
    ],
};

var decorations = {
    cactus1: {
        distribution: $Random {},
        decoration: "map_decoration_wasteland_cactus_1",
        baseWidth: 2.0,
        baseHeight: 4.0,
        density: 0.0024,
        checkNodeCollisions: true,
        checkLineCollisions: false,
        checkDecorationCollisions: true,
        generateDecorationCollisions: true,
        onlyCheckCollisionsAtSpawnPoints: true,
        scale: [2.75, 3.25],
        sortByY: true,
        animated: false,
    },
    cactus2: {
        distribution: $Random {},
        decoration: "map_decoration_wasteland_cactus_2",
        baseWidth: 2.0,
        baseHeight: 4.0,
        density: 0.0008,
        checkNodeCollisions: true,
        checkLineCollisions: false,
        checkDecorationCollisions: true,
        generateDecorationCollisions: true,
        onlyCheckCollisionsAtSpawnPoints: false,
        scale: [2.75, 3.25],
        sortByY: false,
        animated: false,
    },
    skull1: {
        distribution: $Random {},
        decoration: "map_decoration_wasteland_skull_1",
        baseWidth: 3.0,
        baseHeight: 3.0,
        density: 0.0004,
        checkNodeCollisions: true,
        checkLineCollisions: false,
        checkDecorationCollisions: true,
        generateDecorationCollisions: true,
        onlyCheckCollisionsAtSpawnPoints: false,
        scale: [1.1, 1.7],
        sortByY: false,
        animated: false,
    },
    skull2: {
        distribution: $Random {},
        decoration: "map_decoration_wasteland_skull_2",
        baseWidth: 3.0,
        baseHeight: 3.0,
        density: 0.0004,
        checkNodeCollisions: true,
        checkLineCollisions: false,
        checkDecorationCollisions: true,
        generateDecorationCollisions: true,
        onlyCheckCollisionsAtSpawnPoints: false,
        scale: [1.1, 1.7],
        sortByY: false,
        animated: false,
    },
    tree: {
        distribution: $Random {},
        decoration: "tree",
        baseWidth: 5.0,
        baseHeight: 10.0,
        density: 0.024,
        checkNodeCollisions: true,
        checkLineCollisions: false,
        checkDecorationCollisions: true,
        generateDecorationCollisions: true,
        onlyCheckCollisionsAtSpawnPoints: true,
        scale: [1.0, 2.0],
        sortByY: true,
        animated: true,
    },
    sheep: {
        distribution: $Random {},
        decoration: "sheep",
        baseWidth: 8.0,
        baseHeight: 8.0,
        density: 0.001,
        checkNodeCollisions: true,
        checkLineCollisions: false,
        checkDecorationCollisions: true,
        generateDecorationCollisions: true,
        onlyCheckCollisionsAtSpawnPoints: false,
        scale: [1.0, 1.1],
        sortByY: false,
        animated: true,
    },
    magentaMountain: {
        distribution: $FadeX {
            start: 100.0,
            end: 300.0,
            interpolation: interpolation.pow2InInverse
        },
        decoration: "map_decoration_magenta_mountains_mountain",
        baseWidth: 80.0,
        baseHeight: 80.0 * (1080.0 / 1610.0),
        density: 0.0008,
        checkNodeCollisions: true,
        checkLineCollisions: true,
        checkDecorationCollisions: true,
        generateDecorationCollisions: true,
        onlyCheckCollisionsAtSpawnPoints: false,
        scale: [0.8, 1.5],
        shrinkBoundsWidth: 0.3,
        shrinkBoundsHeight: 0.4,
        sortByY: true,
        animated: false,
    },
    magentaMountainSmall1: {
        distribution: $FadeX {
            start: 50.0,
            end: 300.0,
            interpolation: interpolation.pow2InInverse
        },
        decoration: "map_decoration_magenta_mountains_mountain_small_1",
        baseWidth: 60.0,
        baseHeight: 60.0 * (837.0 / 967.0),
        density: 0.0008,
        checkNodeCollisions: true,
        checkLineCollisions: true,
        checkDecorationCollisions: true,
        generateDecorationCollisions: true,
        onlyCheckCollisionsAtSpawnPoints: false,
        scale: [0.5, 1.5],
        shrinkBoundsWidth: 0.3,
        shrinkBoundsHeight: 0.4,
        sortByY: true,
        animated: false,
    },
    magentaMountainSmall2: {
        distribution: $FadeX {
            start: 50.0,
            end: 300.0,
            interpolation: interpolation.pow2InInverse
        },
        decoration: "map_decoration_magenta_mountains_mountain_small_2",
        baseWidth: 60.0,
        baseHeight: 60.0 * (1033.0 / 1453.0),
        density: 0.0008,
        checkNodeCollisions: true,
        checkLineCollisions: true,
        checkDecorationCollisions: true,
        generateDecorationCollisions: true,
        onlyCheckCollisionsAtSpawnPoints: false,
        scale: [0.5, 1.5],
        shrinkBoundsWidth: 0.3,
        shrinkBoundsHeight: 0.4,
        sortByY: true,
        animated: false,
    },
    magentaFog: {
        distribution: $Random {},
        decoration: "map_decoration_magenta_mountains_fog",
        baseWidth: 80.0,
        baseHeight: 80.0 * (867.0 / 1309.0),
        density: 0.0008,
        checkNodeCollisions: false,
        checkLineCollisions: false,
        checkDecorationCollisions: true,
        generateDecorationCollisions: false,
        onlyCheckCollisionsAtSpawnPoints: true,
        scale: [0.8, 1.4],
        shrinkBoundsWidth: 0.4,
        shrinkBoundsHeight: 0.4,
        sortByY: false,
        animated: false,
    },
    magentaTree: {
        distribution: $FadeX {
            start: -100.0,
            end: 100.0,
            interpolation: interpolation.pow4In
        },
        decoration: "map_decoration_magenta_mountains_tree",
        baseWidth: 20.0,
        baseHeight: 20.0,
        density: 0.005,
        checkNodeCollisions: true,
        checkLineCollisions: false,
        checkDecorationCollisions: true,
        generateDecorationCollisions: true,
        onlyCheckCollisionsAtSpawnPoints: true,
        scale: [0.5, 1.0],
        sortByY: true,
        animated: false,
    }
};

var wastelandDecorations = [ decorations.cactus2, decorations.skull1, decorations.skull2, decorations.cactus1 ];
var bewitchedForestDecorations = [ decorations.sheep, decorations.tree ];
//var magentaMountainsDecorations = [ decorations.magentaMountain, decorations.magentaTree ];
var magentaMountainsDecorations = [
    decorations.magentaMountainSmall1, decorations.magentaMountainSmall2, decorations.magentaMountain,
    decorations.magentaTree, decorations.magentaFog
];

var roadBetweenAquaBalleAndTabuLetter = $ThreeLine {
    name: "road_between_aqua_balle_and_tabu_letter_outpost",
    progress: [0.0, 10.0],
    seed: runRandom(1),
    biome: "wasteland",
    startArea: "aqua_balle",
    endArea: "tabu_letter_outpost",
    decorations: wastelandDecorations,
    nodeProtectedArea: 10.0,
    altLinesOffset: 40.0,
    ...mapSharedConfig
};

var roadBetweenTabuLetterAndSalem = $ThreeLine {
    name: "road_between_tabu_letter_outpost_and_salem",
    progress: [10.0, 20.0],
    seed: runRandom(2),
    biome: "bewitched_forest",
    startArea: "tabu_letter_outpost",
    endArea: "salem",
    decorations: bewitchedForestDecorations,
    nodeProtectedArea: 20.0,
    altLinesOffset: 40.0,
    ...mapSharedConfig
};

//var roadBetweenSalemAndSpire = $ThreeLine {
//    name: "road_between_salem_and_spire_outpost",
//    progress: [20.0, 30.0],
//    seed: runRandom(3),
//    biome: "magenta_mountains",
//    startArea: "salem",
//    endArea: "spire_outpost",
//    nodeProtectedArea: 10.0,
//    altLinesOffset: 80.0,
//    decorations: magentaMountainsDecorations,
//    ...mapSharedConfig
//};

var roadBetweenSalemAndSpire = $Radial {
    name: "road_between_salem_and_spire_outpost",
    progress: [20.0, 30.0],
    seed: runRandom(4),
    biome: "magenta_mountains",
    startArea: "salem",
//    endArea: "spire_outpost",
    nodeProtectedArea: 10.0,
    endArea: "tabu_letter_outpost",
    exitNodeCircle: 2,
    exitNodeTexture: "map_node_exit",
    locationSignProtectedAreaWidth: 25.0,
    locationSignProtectedAreaHeight: 30.0,
    decorations: [],
    circles: [
        {
            radius: 20.0,
            numNodes: 3,
            angleVariance: 0.005,
        },
        {
            radius: 50.0,
            numNodes: 6,
            angleVariance: 0.005,
        },
        {
            radius: 80.0,
            numNodes: 11,
            angleVariance: 0.005,
        },
    ],
    horizontalExtension: 80.0,
    verticalExtension: 50.0,
    events: [
        {
            event: $EncounterMapEvent {
                currentlyBlocks: true,
                canBeStarted: true,
                isCompleted: false,
                encounterIndex: 0,
                distanceToEnd: -1,
            },
            nodeTexture: "map_node_fight",
            weight: 100,
        },
        {
            event: $HealOrMaxHPEvent {
                seed: null,
                healRange: [8, 14],
                maxHPRange: [0, 0],
                currentlyBlocks: false,
                canBeStarted: true,
                isCompleted: false,
            },
            circle: 2,
            nodeTexture: "map_node_heal",
            weight: 150
        }
    ]
};

generatorConfig: {
    outputDirectory: "maps/roads",
    maps: [
        roadBetweenAquaBalleAndTabuLetter,
        roadBetweenTabuLetterAndSalem,
        roadBetweenSalemAndSpire,
    ]
},

var images = {
    aquaBalle: {
        image: "location_sign_aqua_balle",
        width: 150.0 * (616.0 / 754.0),
        height: 150.0,
    },
    aquaBalleName: {
        image: "location_name_aqua_balle",
        width: 90.0 * (156.0 / 326.0),
        height: 90.0,
    },
    salem: {
        image: "location_sign_salem",
        width: 150.0 * (616.0 / 754.0),
        height: 150.0
    },
    salemName: {
        image: "location_name_salem",
        width: 90.0,
        height: 90.0 * (163.0 / 270.0)
    },
    tabuletter: {
        image: "location_sign_tabu_letter_outpost",
        width: 150.0 * (616.0 / 754.0),
        height: 150.0
    },
    tabuletterName: {
        image: "location_name_tabuletter_outpost",
        width: 90.0,
        height: 90.0 * (163.0 / 625.0)
    },
    spire: {
        image: "location_sign_spire_outpost",
        width: 150.0 * (616.0 / 754.0),
        height: 150.0
    },
    underConstruction: {
        image: "location_sign_under_construction",
        width: 359.0 * 0.7,
        height: 222.0 * 0.7
    },
    spireName: {
        image: "location_name_spire_outpost",
        width: 90.0,
        height: 90.0 * (184.0 / 540.0)
    }
};

paths: {
    roads: "maps/roads",
    areas: "maps/areas",
    areaDefinitions: "maps/area_definitions",
    staticRoadDefinitions: "maps/static_roads",
},

mapImages: [
    {
        name: "aqua_balle",
        type: "sign",
        ...(images.aquaBalle),
    },
    {
        name: "tabu_letter_outpost",
        type: "sign",
        ...(images.tabuletter),
    },
    {
        name: "salem",
        image: images.salem.image,
        width: images.salem.width,
        height: images.salem.height,
        type: "sign",
    },
    {
        name: "spire_outpost",
        type: "sign",
        ...(images.spire),
    },
    {
        name: "under_construction",
        type: "sign",
        ...(images.underConstruction),
    },
    {
        name: "aqua_balle",
        type: "name",
        ...(images.aquaBalleName),
    },
    {
        name: "tabu_letter_outpost",
        type: "name",
        ...(images.tabuletterName),
    },
    {
        name: "salem",
        image: images.salemName.image,
        width: images.salemName.width,
        height: images.salemName.height,
        type: "name",
    },
    {
        name: "spire_outpost",
        type: "name",
        ...(images.spireName),
    }
],

displayNames: [
    {
        name: "aqua_balle",
        display: "Aqua Balle"
    },
    {
        name: "tabu_letter_outpost",
        display: "Tabu Letter Outpost"
    },
    {
        name: "salem",
        display: "salem"
    },
    {
        name: "spire_outpost",
        display: "Spire Outpost"
    },
    {
        name: "road_between_aqua_balle_and_tabu_letter_outpost",
        display: "Road between aqua balle and tabu letter outpost"
    },
    {
        name: "road_between_tabu_letter_outpost_and_salem",
        display: "Road between tabu letter outpost and salem"
    },
    {
        name: "road_between_salem_and_spire_outpost",
        display: "Road between salem and spire outpost"
    },
],

var worldViewImageScale = 5.0;

worldView: {
    backgroundHandle: "world_view_background",
    locationIndicatorHandle: "enemy_texture",
    locationIndicatorWidth: 2.0,
    locationIndicatorHeight: 6.0,
    locations: [
        {
            name: "aqua_balle",
            x: 1054,
            y: 166,
            image: images.salem.image,
            width: (images.salem.width * worldViewImageScale)#int,
            height: (images.salem.height * worldViewImageScale)#int,
        },
        {
            name: "tabu_letter_outpost",
            x: 1054,
            y: 166,
            image: images.salem.image,
            width: (images.salem.width * worldViewImageScale)#int,
            height: (images.salem.height * worldViewImageScale)#int,
        },
        {
            name: "salem",
            x: 1054,
            y: 166,
            image: images.salem.image,
            width: (images.salem.width * worldViewImageScale)#int,
            height: (images.salem.height * worldViewImageScale)#int,
        },
        {
            name: "spire_outpost",
            x: 1054,
            y: 166,
            image: images.salem.image,
            width: (images.salem.width * worldViewImageScale)#int,
            height: (images.salem.height * worldViewImageScale)#int,
        },
    ]
}

