buildscript {
    ext.kotlinVersion = '1.7.0'
    ext.gdxVersion = '1.11.0'
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        google()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
    }
}

allprojects {
    apply plugin: "eclipse"

    ext {
        appName = "TestGame"
        gdxVersion = '1.11.0'
        roboVMVersion = '2.3.16'
        box2DLightsVersion = '1.5'
        ashleyVersion = '1.7.4'
        aiVersion = '1.8.2'
        gdxControllersVersion = '2.2.1'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

project(":desktop") {
    apply plugin: "kotlin"


    dependencies {
        implementation project(":core")
        api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        implementation "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
    }
}

project(":onj") {
    apply plugin: "kotlin"
    dependencies {
        implementation("org.jetbrains.kotlin:kotlin-reflect:1.8.0")
    }
}

project(":core") {
    apply plugin: "kotlin"

    dependencies {
        implementation project(":onj")
        api "com.badlogicgames.gdx:gdx:$gdxVersion"
        implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        api 'io.github.libktx:ktx-actors:1.11.0-rc2'
        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")
    }
}

import com.badlogic.gdx.tools.texturepacker.TexturePacker
import java.io.File

task texturePacker {
    doLast {
        file("assets/textures/toPack.txt").eachLine { line ->
            if (!line.allWhitespace) {

                def atlasDir = file("assets/textures/packed/$line")
                if (atlasDir.exists()) {
                    atlasDir.deleteDir()
                }
                println(line)
                TexturePacker.process(
                    "assets/textures/$line",
                    "assets/textures/packed/$line",
                    line
                )
            }
        }
    }
}
